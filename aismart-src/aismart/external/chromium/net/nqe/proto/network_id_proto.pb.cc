// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_id_proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "network_id_proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace net {
namespace nqe {
namespace internal {
class NetworkIDProtoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetworkIDProto> {
} _NetworkIDProto_default_instance_;

namespace protobuf_network_5fid_5fproto_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _NetworkIDProto_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _NetworkIDProto_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_network_5fid_5fproto_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkIDProto::kConnectionTypeFieldNumber;
const int NetworkIDProto::kIdFieldNumber;
const int NetworkIDProto::kSignalStrengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkIDProto::NetworkIDProto()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_network_5fid_5fproto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:net.nqe.internal.NetworkIDProto)
}
NetworkIDProto::NetworkIDProto(const NetworkIDProto& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&connection_type_, &from.connection_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&signal_strength_) -
    reinterpret_cast<char*>(&connection_type_)) + sizeof(signal_strength_));
  // @@protoc_insertion_point(copy_constructor:net.nqe.internal.NetworkIDProto)
}

void NetworkIDProto::SharedCtor() {
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&connection_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&signal_strength_) -
      reinterpret_cast<char*>(&connection_type_)) + sizeof(signal_strength_));
}

NetworkIDProto::~NetworkIDProto() {
  // @@protoc_insertion_point(destructor:net.nqe.internal.NetworkIDProto)
  SharedDtor();
}

void NetworkIDProto::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkIDProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkIDProto& NetworkIDProto::default_instance() {
  protobuf_network_5fid_5fproto_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkIDProto* NetworkIDProto::New(::google::protobuf::Arena* arena) const {
  NetworkIDProto* n = new NetworkIDProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkIDProto::Clear() {
// @@protoc_insertion_point(message_clear_start:net.nqe.internal.NetworkIDProto)
  if (has_id()) {
    GOOGLE_DCHECK(!id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*id_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    ::memset(&connection_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&signal_strength_) -
        reinterpret_cast<char*>(&connection_type_)) + sizeof(signal_strength_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NetworkIDProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:net.nqe.internal.NetworkIDProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 connection_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_connection_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connection_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 signal_strength = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_signal_strength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signal_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:net.nqe.internal.NetworkIDProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:net.nqe.internal.NetworkIDProto)
  return false;
#undef DO_
}

void NetworkIDProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:net.nqe.internal.NetworkIDProto)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 connection_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->connection_type(), output);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->id(), output);
  }

  // optional int32 signal_strength = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->signal_strength(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:net.nqe.internal.NetworkIDProto)
}

size_t NetworkIDProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:net.nqe.internal.NetworkIDProto)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int32 connection_type = 1;
    if (has_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connection_type());
    }

    // optional int32 signal_strength = 3;
    if (has_signal_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signal_strength());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkIDProto::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkIDProto*>(&from));
}

void NetworkIDProto::MergeFrom(const NetworkIDProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:net.nqe.internal.NetworkIDProto)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      connection_type_ = from.connection_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      signal_strength_ = from.signal_strength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NetworkIDProto::CopyFrom(const NetworkIDProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:net.nqe.internal.NetworkIDProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkIDProto::IsInitialized() const {
  return true;
}

void NetworkIDProto::Swap(NetworkIDProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkIDProto::InternalSwap(NetworkIDProto* other) {
  id_.Swap(&other->id_);
  std::swap(connection_type_, other->connection_type_);
  std::swap(signal_strength_, other->signal_strength_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkIDProto::GetTypeName() const {
  return "net.nqe.internal.NetworkIDProto";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkIDProto

// optional int32 connection_type = 1;
bool NetworkIDProto::has_connection_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NetworkIDProto::set_has_connection_type() {
  _has_bits_[0] |= 0x00000002u;
}
void NetworkIDProto::clear_has_connection_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void NetworkIDProto::clear_connection_type() {
  connection_type_ = 0;
  clear_has_connection_type();
}
::google::protobuf::int32 NetworkIDProto::connection_type() const {
  // @@protoc_insertion_point(field_get:net.nqe.internal.NetworkIDProto.connection_type)
  return connection_type_;
}
void NetworkIDProto::set_connection_type(::google::protobuf::int32 value) {
  set_has_connection_type();
  connection_type_ = value;
  // @@protoc_insertion_point(field_set:net.nqe.internal.NetworkIDProto.connection_type)
}

// optional string id = 2;
bool NetworkIDProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NetworkIDProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void NetworkIDProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void NetworkIDProto::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
const ::std::string& NetworkIDProto::id() const {
  // @@protoc_insertion_point(field_get:net.nqe.internal.NetworkIDProto.id)
  return id_.GetNoArena();
}
void NetworkIDProto::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:net.nqe.internal.NetworkIDProto.id)
}
#if LANG_CXX11
void NetworkIDProto::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:net.nqe.internal.NetworkIDProto.id)
}
#endif
void NetworkIDProto::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:net.nqe.internal.NetworkIDProto.id)
}
void NetworkIDProto::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:net.nqe.internal.NetworkIDProto.id)
}
::std::string* NetworkIDProto::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:net.nqe.internal.NetworkIDProto.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkIDProto::release_id() {
  // @@protoc_insertion_point(field_release:net.nqe.internal.NetworkIDProto.id)
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkIDProto::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:net.nqe.internal.NetworkIDProto.id)
}

// optional int32 signal_strength = 3;
bool NetworkIDProto::has_signal_strength() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NetworkIDProto::set_has_signal_strength() {
  _has_bits_[0] |= 0x00000004u;
}
void NetworkIDProto::clear_has_signal_strength() {
  _has_bits_[0] &= ~0x00000004u;
}
void NetworkIDProto::clear_signal_strength() {
  signal_strength_ = 0;
  clear_has_signal_strength();
}
::google::protobuf::int32 NetworkIDProto::signal_strength() const {
  // @@protoc_insertion_point(field_get:net.nqe.internal.NetworkIDProto.signal_strength)
  return signal_strength_;
}
void NetworkIDProto::set_signal_strength(::google::protobuf::int32 value) {
  set_has_signal_strength();
  signal_strength_ = value;
  // @@protoc_insertion_point(field_set:net.nqe.internal.NetworkIDProto.signal_strength)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace nqe
}  // namespace net

// @@protoc_insertion_point(global_scope)
