// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/library_loader/LibraryLoader

#ifndef org_chromium_base_library_loader_LibraryLoader_JNI
#define org_chromium_base_library_loader_LibraryLoader_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_base_library_1loader_LibraryLoader[];
const char kClassPath_org_chromium_base_library_1loader_LibraryLoader[] =
    "org/chromium/base/library_loader/LibraryLoader";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_base_library_1loader_LibraryLoader_clazz = 0;
#ifndef org_chromium_base_library_1loader_LibraryLoader_clazz_defined
#define org_chromium_base_library_1loader_LibraryLoader_clazz_defined
inline jclass org_chromium_base_library_1loader_LibraryLoader_clazz(JNIEnv* env)
    {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_base_library_1loader_LibraryLoader,
      &g_org_chromium_base_library_1loader_LibraryLoader_clazz);
}
#endif

namespace base {
namespace android {

// Step 2: method stubs.

static jboolean JNI_LibraryLoader_LibraryLoaded(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller);

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_base_library_1loader_LibraryLoader_nativeLibraryLoaded(JNIEnv*
    env, jobject jcaller) {
  TRACE_NATIVE_EXECUTION_SCOPED("LibraryLoaded");
  return JNI_LibraryLoader_LibraryLoaded(env,
      base::android::JavaParamRef<jobject>(env, jcaller));
}

static void
    JNI_LibraryLoader_RecordChromiumAndroidLinkerBrowserHistogram(JNIEnv* env,
    const base::android::JavaParamRef<jobject>& jcaller,
    jboolean isUsingBrowserSharedRelros,
    jboolean loadAtFixedAddressFailed,
    jint libraryLoadFromApkStatus,
    jlong libraryLoadTime);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_library_1loader_LibraryLoader_nativeRecordChromiumAndroidLinkerBrowserHistogram(JNIEnv*
    env, jobject jcaller,
    jboolean isUsingBrowserSharedRelros,
    jboolean loadAtFixedAddressFailed,
    jint libraryLoadFromApkStatus,
    jlong libraryLoadTime) {
  TRACE_NATIVE_EXECUTION_SCOPED("RecordChromiumAndroidLinkerBrowserHistogram");
  return JNI_LibraryLoader_RecordChromiumAndroidLinkerBrowserHistogram(env,
      base::android::JavaParamRef<jobject>(env, jcaller),
      isUsingBrowserSharedRelros, loadAtFixedAddressFailed,
      libraryLoadFromApkStatus, libraryLoadTime);
}

static void JNI_LibraryLoader_RecordLibraryPreloaderBrowserHistogram(JNIEnv*
    env, const base::android::JavaParamRef<jobject>& jcaller,
    jint status);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_library_1loader_LibraryLoader_nativeRecordLibraryPreloaderBrowserHistogram(JNIEnv*
    env, jobject jcaller,
    jint status) {
  TRACE_NATIVE_EXECUTION_SCOPED("RecordLibraryPreloaderBrowserHistogram");
  return JNI_LibraryLoader_RecordLibraryPreloaderBrowserHistogram(env,
      base::android::JavaParamRef<jobject>(env, jcaller), status);
}

static void
    JNI_LibraryLoader_RegisterChromiumAndroidLinkerRendererHistogram(JNIEnv*
    env, const base::android::JavaParamRef<jobject>& jcaller,
    jboolean requestedSharedRelro,
    jboolean loadAtFixedAddressFailed,
    jlong libraryLoadTime);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_library_1loader_LibraryLoader_nativeRegisterChromiumAndroidLinkerRendererHistogram(JNIEnv*
    env, jobject jcaller,
    jboolean requestedSharedRelro,
    jboolean loadAtFixedAddressFailed,
    jlong libraryLoadTime) {
TRACE_NATIVE_EXECUTION_SCOPED("RegisterChromiumAndroidLinkerRendererHistogram");
  return JNI_LibraryLoader_RegisterChromiumAndroidLinkerRendererHistogram(env,
      base::android::JavaParamRef<jobject>(env, jcaller), requestedSharedRelro,
      loadAtFixedAddressFailed, libraryLoadTime);
}

static void JNI_LibraryLoader_RegisterLibraryPreloaderRendererHistogram(JNIEnv*
    env, const base::android::JavaParamRef<jobject>& jcaller,
    jint status);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_library_1loader_LibraryLoader_nativeRegisterLibraryPreloaderRendererHistogram(JNIEnv*
    env, jobject jcaller,
    jint status) {
  TRACE_NATIVE_EXECUTION_SCOPED("RegisterLibraryPreloaderRendererHistogram");
  return JNI_LibraryLoader_RegisterLibraryPreloaderRendererHistogram(env,
      base::android::JavaParamRef<jobject>(env, jcaller), status);
}

static base::android::ScopedJavaLocalRef<jstring>
    JNI_LibraryLoader_GetVersionNumber(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& jcaller);

JNI_GENERATOR_EXPORT jstring
    Java_org_chromium_base_library_1loader_LibraryLoader_nativeGetVersionNumber(JNIEnv*
    env, jobject jcaller) {
  TRACE_NATIVE_EXECUTION_SCOPED("GetVersionNumber");
  return JNI_LibraryLoader_GetVersionNumber(env,
      base::android::JavaParamRef<jobject>(env, jcaller)).Release();
}

static jboolean JNI_LibraryLoader_ForkAndPrefetchNativeLibrary(JNIEnv* env,
    const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_base_library_1loader_LibraryLoader_nativeForkAndPrefetchNativeLibrary(JNIEnv*
    env, jclass jcaller) {
  TRACE_NATIVE_EXECUTION_SCOPED("ForkAndPrefetchNativeLibrary");
  return JNI_LibraryLoader_ForkAndPrefetchNativeLibrary(env,
      base::android::JavaParamRef<jclass>(env, jcaller));
}

static jint JNI_LibraryLoader_PercentageOfResidentNativeLibraryCode(JNIEnv* env,
    const base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT jint
    Java_org_chromium_base_library_1loader_LibraryLoader_nativePercentageOfResidentNativeLibraryCode(JNIEnv*
    env, jclass jcaller) {
  TRACE_NATIVE_EXECUTION_SCOPED("PercentageOfResidentNativeLibraryCode");
  return JNI_LibraryLoader_PercentageOfResidentNativeLibraryCode(env,
      base::android::JavaParamRef<jclass>(env, jcaller));
}

static void JNI_LibraryLoader_PeriodicallyCollectResidency(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_library_1loader_LibraryLoader_nativePeriodicallyCollectResidency(JNIEnv*
    env, jclass jcaller) {
  TRACE_NATIVE_EXECUTION_SCOPED("PeriodicallyCollectResidency");
  return JNI_LibraryLoader_PeriodicallyCollectResidency(env,
      base::android::JavaParamRef<jclass>(env, jcaller));
}

static base::subtle::AtomicWord
    g_org_chromium_base_library_1loader_LibraryLoader_getLibraryProcessType = 0;
static jint Java_LibraryLoader_getLibraryProcessType(JNIEnv* env) {
  CHECK_CLAZZ(env, org_chromium_base_library_1loader_LibraryLoader_clazz(env),
      org_chromium_base_library_1loader_LibraryLoader_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_base_library_1loader_LibraryLoader_clazz(env),
      "getLibraryProcessType",
"("
")"
"I",
      &g_org_chromium_base_library_1loader_LibraryLoader_getLibraryProcessType);

  jint ret =
env->CallStaticIntMethod(org_chromium_base_library_1loader_LibraryLoader_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

}  // namespace android
}  // namespace base

#endif  // org_chromium_base_library_loader_LibraryLoader_JNI
