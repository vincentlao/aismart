// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/CommandLine

#ifndef org_chromium_base_CommandLine_JNI
#define org_chromium_base_CommandLine_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_base_CommandLine[];
const char kClassPath_org_chromium_base_CommandLine[] =
    "org/chromium/base/CommandLine";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_base_CommandLine_clazz = 0;
#ifndef org_chromium_base_CommandLine_clazz_defined
#define org_chromium_base_CommandLine_clazz_defined
inline jclass org_chromium_base_CommandLine_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_base_CommandLine,
      &g_org_chromium_base_CommandLine_clazz);
}
#endif

// Step 2: method stubs.

static void JNI_CommandLine_Init(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobjectArray>& args);

JNI_GENERATOR_EXPORT void Java_org_chromium_base_CommandLine_nativeInit(JNIEnv*
    env, jclass jcaller,
    jobjectArray args) {
  TRACE_NATIVE_EXECUTION_SCOPED("Init");
  return JNI_CommandLine_Init(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jobjectArray>(env, args));
}

static jboolean JNI_CommandLine_HasSwitch(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& switchString);

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_base_CommandLine_nativeHasSwitch(JNIEnv* env, jclass
    jcaller,
    jstring switchString) {
  TRACE_NATIVE_EXECUTION_SCOPED("HasSwitch");
  return JNI_CommandLine_HasSwitch(env, base::android::JavaParamRef<jclass>(env,
      jcaller), base::android::JavaParamRef<jstring>(env, switchString));
}

static base::android::ScopedJavaLocalRef<jstring>
    JNI_CommandLine_GetSwitchValue(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& switchString);

JNI_GENERATOR_EXPORT jstring
    Java_org_chromium_base_CommandLine_nativeGetSwitchValue(JNIEnv* env, jclass
    jcaller,
    jstring switchString) {
  TRACE_NATIVE_EXECUTION_SCOPED("GetSwitchValue");
  return JNI_CommandLine_GetSwitchValue(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, switchString)).Release();
}

static void JNI_CommandLine_AppendSwitch(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& switchString);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_CommandLine_nativeAppendSwitch(JNIEnv* env, jclass
    jcaller,
    jstring switchString) {
  TRACE_NATIVE_EXECUTION_SCOPED("AppendSwitch");
  return JNI_CommandLine_AppendSwitch(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, switchString));
}

static void JNI_CommandLine_AppendSwitchWithValue(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& switchString,
    const base::android::JavaParamRef<jstring>& value);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_CommandLine_nativeAppendSwitchWithValue(JNIEnv* env,
    jclass jcaller,
    jstring switchString,
    jstring value) {
  TRACE_NATIVE_EXECUTION_SCOPED("AppendSwitchWithValue");
  return JNI_CommandLine_AppendSwitchWithValue(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, switchString),
      base::android::JavaParamRef<jstring>(env, value));
}

static void JNI_CommandLine_AppendSwitchesAndArguments(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobjectArray>& array);

JNI_GENERATOR_EXPORT void
    Java_org_chromium_base_CommandLine_nativeAppendSwitchesAndArguments(JNIEnv*
    env, jclass jcaller,
    jobjectArray array) {
  TRACE_NATIVE_EXECUTION_SCOPED("AppendSwitchesAndArguments");
  return JNI_CommandLine_AppendSwitchesAndArguments(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobjectArray>(env, array));
}

#endif  // org_chromium_base_CommandLine_JNI
