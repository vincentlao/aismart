// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/EventLog

#ifndef org_chromium_base_EventLog_JNI
#define org_chromium_base_EventLog_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_base_EventLog[];
const char kClassPath_org_chromium_base_EventLog[] =
    "org/chromium/base/EventLog";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_base_EventLog_clazz = 0;
#ifndef org_chromium_base_EventLog_clazz_defined
#define org_chromium_base_EventLog_clazz_defined
inline jclass org_chromium_base_EventLog_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_base_EventLog,
      &g_org_chromium_base_EventLog_clazz);
}
#endif

namespace base {
namespace android {

// Step 2: method stubs.

static base::subtle::AtomicWord g_org_chromium_base_EventLog_writeEvent = 0;
static void Java_EventLog_writeEvent(JNIEnv* env, JniIntWrapper tag,
    JniIntWrapper value) {
  CHECK_CLAZZ(env, org_chromium_base_EventLog_clazz(env),
      org_chromium_base_EventLog_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_base_EventLog_clazz(env),
      "writeEvent",
"("
"I"
"I"
")"
"V",
      &g_org_chromium_base_EventLog_writeEvent);

     env->CallStaticVoidMethod(org_chromium_base_EventLog_clazz(env),
          method_id, as_jint(tag), as_jint(value));
  jni_generator::CheckException(env);
}

}  // namespace android
}  // namespace base

#endif  // org_chromium_base_EventLog_JNI
