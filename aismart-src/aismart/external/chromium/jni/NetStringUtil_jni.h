// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/net/NetStringUtil

#ifndef org_chromium_net_NetStringUtil_JNI
#define org_chromium_net_NetStringUtil_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_net_NetStringUtil[];
const char kClassPath_org_chromium_net_NetStringUtil[] =
    "org/chromium/net/NetStringUtil";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_net_NetStringUtil_clazz = 0;
#ifndef org_chromium_net_NetStringUtil_clazz_defined
#define org_chromium_net_NetStringUtil_clazz_defined
inline jclass org_chromium_net_NetStringUtil_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_net_NetStringUtil,
      &g_org_chromium_net_NetStringUtil_clazz);
}
#endif

namespace net {
namespace android {

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_org_chromium_net_NetStringUtil_convertToUnicode = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_NetStringUtil_convertToUnicode(JNIEnv* env, const
    base::android::JavaRef<jobject>& text,
    const base::android::JavaRef<jstring>& charsetName) {
  CHECK_CLAZZ(env, org_chromium_net_NetStringUtil_clazz(env),
      org_chromium_net_NetStringUtil_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_net_NetStringUtil_clazz(env),
      "convertToUnicode",
"("
"Ljava/nio/ByteBuffer;"
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
      &g_org_chromium_net_NetStringUtil_convertToUnicode);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(org_chromium_net_NetStringUtil_clazz(env),
          method_id, text.obj(), charsetName.obj()));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord
    g_org_chromium_net_NetStringUtil_convertToUnicodeAndNormalize = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_NetStringUtil_convertToUnicodeAndNormalize(JNIEnv* env, const
    base::android::JavaRef<jobject>& text,
    const base::android::JavaRef<jstring>& charsetName) {
  CHECK_CLAZZ(env, org_chromium_net_NetStringUtil_clazz(env),
      org_chromium_net_NetStringUtil_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_net_NetStringUtil_clazz(env),
      "convertToUnicodeAndNormalize",
"("
"Ljava/nio/ByteBuffer;"
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
      &g_org_chromium_net_NetStringUtil_convertToUnicodeAndNormalize);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(org_chromium_net_NetStringUtil_clazz(env),
          method_id, text.obj(), charsetName.obj()));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord
    g_org_chromium_net_NetStringUtil_convertToUnicodeWithSubstitutions = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_NetStringUtil_convertToUnicodeWithSubstitutions(JNIEnv* env, const
    base::android::JavaRef<jobject>& text,
    const base::android::JavaRef<jstring>& charsetName) {
  CHECK_CLAZZ(env, org_chromium_net_NetStringUtil_clazz(env),
      org_chromium_net_NetStringUtil_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_net_NetStringUtil_clazz(env),
      "convertToUnicodeWithSubstitutions",
"("
"Ljava/nio/ByteBuffer;"
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
      &g_org_chromium_net_NetStringUtil_convertToUnicodeWithSubstitutions);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(org_chromium_net_NetStringUtil_clazz(env),
          method_id, text.obj(), charsetName.obj()));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_org_chromium_net_NetStringUtil_toUpperCase =
    0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_NetStringUtil_toUpperCase(JNIEnv* env, const
    base::android::JavaRef<jstring>& str) {
  CHECK_CLAZZ(env, org_chromium_net_NetStringUtil_clazz(env),
      org_chromium_net_NetStringUtil_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_chromium_net_NetStringUtil_clazz(env),
      "toUpperCase",
"("
"Ljava/lang/String;"
")"
"Ljava/lang/String;",
      &g_org_chromium_net_NetStringUtil_toUpperCase);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(org_chromium_net_NetStringUtil_clazz(env),
          method_id, str.obj()));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

}  // namespace android
}  // namespace net

#endif  // org_chromium_net_NetStringUtil_JNI
