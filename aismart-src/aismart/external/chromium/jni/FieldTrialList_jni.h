// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/FieldTrialList

#ifndef org_chromium_base_FieldTrialList_JNI
#define org_chromium_base_FieldTrialList_JNI

#include <jni.h>

#include "base/android/jni_generator/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_base_FieldTrialList[];
const char kClassPath_org_chromium_base_FieldTrialList[] =
    "org/chromium/base/FieldTrialList";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_chromium_base_FieldTrialList_clazz = 0;
#ifndef org_chromium_base_FieldTrialList_clazz_defined
#define org_chromium_base_FieldTrialList_clazz_defined
inline jclass org_chromium_base_FieldTrialList_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_base_FieldTrialList,
      &g_org_chromium_base_FieldTrialList_clazz);
}
#endif

// Step 2: method stubs.

static base::android::ScopedJavaLocalRef<jstring>
    JNI_FieldTrialList_FindFullName(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& trialName);

JNI_GENERATOR_EXPORT jstring
    Java_org_chromium_base_FieldTrialList_nativeFindFullName(JNIEnv* env, jclass
    jcaller,
    jstring trialName) {
  TRACE_NATIVE_EXECUTION_SCOPED("FindFullName");
  return JNI_FieldTrialList_FindFullName(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, trialName)).Release();
}

static jboolean JNI_FieldTrialList_TrialExists(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& trialName);

JNI_GENERATOR_EXPORT jboolean
    Java_org_chromium_base_FieldTrialList_nativeTrialExists(JNIEnv* env, jclass
    jcaller,
    jstring trialName) {
  TRACE_NATIVE_EXECUTION_SCOPED("TrialExists");
  return JNI_FieldTrialList_TrialExists(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, trialName));
}

static base::android::ScopedJavaLocalRef<jstring>
    JNI_FieldTrialList_GetVariationParameter(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jstring>& trialName,
    const base::android::JavaParamRef<jstring>& parameterKey);

JNI_GENERATOR_EXPORT jstring
    Java_org_chromium_base_FieldTrialList_nativeGetVariationParameter(JNIEnv*
    env, jclass jcaller,
    jstring trialName,
    jstring parameterKey) {
  TRACE_NATIVE_EXECUTION_SCOPED("GetVariationParameter");
  return JNI_FieldTrialList_GetVariationParameter(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jstring>(env, trialName),
      base::android::JavaParamRef<jstring>(env, parameterKey)).Release();
}

#endif  // org_chromium_base_FieldTrialList_JNI
