// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base\android\jni_generator\jni_generator.py
// For
//     org/webrtc/VideoRenderer

#ifndef org_webrtc_VideoRenderer_JNI
#define org_webrtc_VideoRenderer_JNI

#include "sdk/android/src/jni/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char kClassPath_org_webrtc_VideoRenderer[];
const char kClassPath_org_webrtc_VideoRenderer[] = "org/webrtc/VideoRenderer";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_VideoRenderer_00024I420Frame[];
const char kClassPath_org_webrtc_VideoRenderer_00024I420Frame[] =
    "org/webrtc/VideoRenderer$I420Frame";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_VideoRenderer_00024Callbacks[];
const char kClassPath_org_webrtc_VideoRenderer_00024Callbacks[] =
    "org/webrtc/VideoRenderer$Callbacks";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_VideoRenderer_clazz = 0;
#ifndef org_webrtc_VideoRenderer_clazz_defined
#define org_webrtc_VideoRenderer_clazz_defined
inline jclass org_webrtc_VideoRenderer_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_webrtc_VideoRenderer,
      &g_org_webrtc_VideoRenderer_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_VideoRenderer_00024I420Frame_clazz = 0;
#ifndef org_webrtc_VideoRenderer_00024I420Frame_clazz_defined
#define org_webrtc_VideoRenderer_00024I420Frame_clazz_defined
inline jclass org_webrtc_VideoRenderer_00024I420Frame_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_VideoRenderer_00024I420Frame,
      &g_org_webrtc_VideoRenderer_00024I420Frame_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_VideoRenderer_00024Callbacks_clazz = 0;
#ifndef org_webrtc_VideoRenderer_00024Callbacks_clazz_defined
#define org_webrtc_VideoRenderer_00024Callbacks_clazz_defined
inline jclass org_webrtc_VideoRenderer_00024Callbacks_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_VideoRenderer_00024Callbacks,
      &g_org_webrtc_VideoRenderer_00024Callbacks_clazz);
}
#endif

namespace webrtc {
namespace jni {

// Step 2: method stubs.

static void JNI_VideoRenderer_CopyPlane(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& src,
    jint width,
    jint height,
    jint srcStride,
    const base::android::JavaParamRef<jobject>& dst,
    jint dstStride);

JNI_GENERATOR_EXPORT void Java_org_webrtc_VideoRenderer_nativeCopyPlane(JNIEnv*
    env, jclass jcaller,
    jobject src,
    jint width,
    jint height,
    jint srcStride,
    jobject dst,
    jint dstStride) {
  return JNI_VideoRenderer_CopyPlane(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, src), width, height, srcStride,
      base::android::JavaParamRef<jobject>(env, dst), dstStride);
}

static jlong JNI_VideoRenderer_CreateVideoRenderer(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& callbacks);

JNI_GENERATOR_EXPORT jlong
    Java_org_webrtc_VideoRenderer_nativeCreateVideoRenderer(JNIEnv* env, jclass
    jcaller,
    jobject callbacks) {
  return JNI_VideoRenderer_CreateVideoRenderer(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, callbacks));
}

static void JNI_VideoRenderer_FreeWrappedVideoRenderer(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong videoRenderer);

JNI_GENERATOR_EXPORT void
    Java_org_webrtc_VideoRenderer_nativeFreeWrappedVideoRenderer(JNIEnv* env,
    jclass jcaller,
    jlong videoRenderer) {
  return JNI_VideoRenderer_FreeWrappedVideoRenderer(env,
      base::android::JavaParamRef<jclass>(env, jcaller), videoRenderer);
}

static void JNI_VideoRenderer_ReleaseFrame(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong framePointer);

JNI_GENERATOR_EXPORT void
    Java_org_webrtc_VideoRenderer_nativeReleaseFrame(JNIEnv* env, jclass
    jcaller,
    jlong framePointer) {
  return JNI_VideoRenderer_ReleaseFrame(env,
      base::android::JavaParamRef<jclass>(env, jcaller), framePointer);
}

static base::subtle::AtomicWord
    g_org_webrtc_VideoRenderer_00024I420Frame_Constructor = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_I420Frame_Constructor(JNIEnv* env, JniIntWrapper rotationDegree,
    const base::android::JavaRef<jobject>& buffer,
    jlong nativeFramePointer) {
  CHECK_CLAZZ(env, org_webrtc_VideoRenderer_00024I420Frame_clazz(env),
      org_webrtc_VideoRenderer_00024I420Frame_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_VideoRenderer_00024I420Frame_clazz(env),
      "<init>",
"("
"I"
"Lorg/webrtc/VideoFrame$Buffer;"
"J"
")"
"V",
      &g_org_webrtc_VideoRenderer_00024I420Frame_Constructor);

  jobject ret =
      env->NewObject(org_webrtc_VideoRenderer_00024I420Frame_clazz(env),
          method_id, as_jint(rotationDegree), buffer.obj(), nativeFramePointer);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_VideoRenderer_00024I420Frame_createI420Frame = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_I420Frame_createI420Frame(JNIEnv* env, JniIntWrapper width,
    JniIntWrapper height,
    JniIntWrapper rotationDegree,
    JniIntWrapper y_stride,
    const base::android::JavaRef<jobject>& y_buffer,
    JniIntWrapper u_stride,
    const base::android::JavaRef<jobject>& u_buffer,
    JniIntWrapper v_stride,
    const base::android::JavaRef<jobject>& v_buffer,
    jlong nativeFramePointer) {
  CHECK_CLAZZ(env, org_webrtc_VideoRenderer_00024I420Frame_clazz(env),
      org_webrtc_VideoRenderer_00024I420Frame_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_VideoRenderer_00024I420Frame_clazz(env),
      "createI420Frame",
"("
"I"
"I"
"I"
"I"
"Ljava/nio/ByteBuffer;"
"I"
"Ljava/nio/ByteBuffer;"
"I"
"Ljava/nio/ByteBuffer;"
"J"
")"
"Lorg/webrtc/VideoRenderer$I420Frame;",
      &g_org_webrtc_VideoRenderer_00024I420Frame_createI420Frame);

  jobject ret =
env->CallStaticObjectMethod(org_webrtc_VideoRenderer_00024I420Frame_clazz(env),
          method_id, as_jint(width), as_jint(height), as_jint(rotationDegree),
              as_jint(y_stride), y_buffer.obj(), as_jint(u_stride),
              u_buffer.obj(), as_jint(v_stride), v_buffer.obj(),
              nativeFramePointer);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_VideoRenderer_00024I420Frame_createTextureFrame = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_I420Frame_createTextureFrame(JNIEnv* env, JniIntWrapper width,
    JniIntWrapper height,
    JniIntWrapper rotationDegree,
    JniIntWrapper textureId,
    const base::android::JavaRef<jfloatArray>& samplingMatrix,
    jlong nativeFramePointer) {
  CHECK_CLAZZ(env, org_webrtc_VideoRenderer_00024I420Frame_clazz(env),
      org_webrtc_VideoRenderer_00024I420Frame_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_VideoRenderer_00024I420Frame_clazz(env),
      "createTextureFrame",
"("
"I"
"I"
"I"
"I"
"[F"
"J"
")"
"Lorg/webrtc/VideoRenderer$I420Frame;",
      &g_org_webrtc_VideoRenderer_00024I420Frame_createTextureFrame);

  jobject ret =
env->CallStaticObjectMethod(org_webrtc_VideoRenderer_00024I420Frame_clazz(env),
          method_id, as_jint(width), as_jint(height), as_jint(rotationDegree),
              as_jint(textureId), samplingMatrix.obj(), nativeFramePointer);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_VideoRenderer_00024Callbacks_renderFrame = 0;
static void Java_Callbacks_renderFrame(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    frame) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoRenderer_00024Callbacks_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_VideoRenderer_00024Callbacks_clazz(env),
      "renderFrame",
"("
"Lorg/webrtc/VideoRenderer$I420Frame;"
")"
"V",
      &g_org_webrtc_VideoRenderer_00024Callbacks_renderFrame);

     env->CallVoidMethod(obj.obj(),
          method_id, frame.obj());
  jni_generator::CheckException(env);
}

}  // namespace jni
}  // namespace webrtc

#endif  // org_webrtc_VideoRenderer_JNI
