// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base\android\jni_generator\jni_generator.py
// For
//     org/webrtc/EncodedImage

#ifndef org_webrtc_EncodedImage_JNI
#define org_webrtc_EncodedImage_JNI

#include "sdk/android/src/jni/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char kClassPath_org_webrtc_EncodedImage[];
const char kClassPath_org_webrtc_EncodedImage[] = "org/webrtc/EncodedImage";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_EncodedImage_00024FrameType[];
const char kClassPath_org_webrtc_EncodedImage_00024FrameType[] =
    "org/webrtc/EncodedImage$FrameType";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_webrtc_EncodedImage_clazz
    = 0;
#ifndef org_webrtc_EncodedImage_clazz_defined
#define org_webrtc_EncodedImage_clazz_defined
inline jclass org_webrtc_EncodedImage_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_webrtc_EncodedImage,
      &g_org_webrtc_EncodedImage_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_EncodedImage_00024FrameType_clazz = 0;
#ifndef org_webrtc_EncodedImage_00024FrameType_clazz_defined
#define org_webrtc_EncodedImage_00024FrameType_clazz_defined
inline jclass org_webrtc_EncodedImage_00024FrameType_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_EncodedImage_00024FrameType,
      &g_org_webrtc_EncodedImage_00024FrameType_clazz);
}
#endif

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_org_webrtc_EncodedImage_00024FrameType_fromNativeIndex = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_FrameType_fromNativeIndex(JNIEnv* env, JniIntWrapper nativeIndex) {
  CHECK_CLAZZ(env, org_webrtc_EncodedImage_00024FrameType_clazz(env),
      org_webrtc_EncodedImage_00024FrameType_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_EncodedImage_00024FrameType_clazz(env),
      "fromNativeIndex",
"("
"I"
")"
"Lorg/webrtc/EncodedImage$FrameType;",
      &g_org_webrtc_EncodedImage_00024FrameType_fromNativeIndex);

  jobject ret =
env->CallStaticObjectMethod(org_webrtc_EncodedImage_00024FrameType_clazz(env),
          method_id, as_jint(nativeIndex));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_EncodedImage_Constructor = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_EncodedImage_Constructor(JNIEnv* env, const
    base::android::JavaRef<jobject>& buffer,
    JniIntWrapper encodedWidth,
    JniIntWrapper encodedHeight,
    jlong captureTimeNs,
    const base::android::JavaRef<jobject>& frameType,
    JniIntWrapper rotation,
    jboolean completeFrame,
    const base::android::JavaRef<jobject>& qp) {
  CHECK_CLAZZ(env, org_webrtc_EncodedImage_clazz(env),
      org_webrtc_EncodedImage_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_EncodedImage_clazz(env),
      "<init>",
"("
"Ljava/nio/ByteBuffer;"
"I"
"I"
"J"
"Lorg/webrtc/EncodedImage$FrameType;"
"I"
"Z"
"Ljava/lang/Integer;"
")"
"V",
      &g_org_webrtc_EncodedImage_Constructor);

  jobject ret =
      env->NewObject(org_webrtc_EncodedImage_clazz(env),
          method_id, buffer.obj(), as_jint(encodedWidth),
              as_jint(encodedHeight), captureTimeNs, frameType.obj(),
              as_jint(rotation), completeFrame, qp.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

#endif  // org_webrtc_EncodedImage_JNI
