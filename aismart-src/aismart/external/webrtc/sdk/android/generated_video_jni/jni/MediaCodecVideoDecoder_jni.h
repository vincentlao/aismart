// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base\android\jni_generator\jni_generator.py
// For
//     org/webrtc/MediaCodecVideoDecoder

#ifndef org_webrtc_MediaCodecVideoDecoder_JNI
#define org_webrtc_MediaCodecVideoDecoder_JNI

#include "sdk/android/src/jni/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer[];
const char
    kClassPath_org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer[] =
    "org/webrtc/MediaCodecVideoDecoder$DecodedOutputBuffer";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_MediaCodecVideoDecoder[];
const char kClassPath_org_webrtc_MediaCodecVideoDecoder[] =
    "org/webrtc/MediaCodecVideoDecoder";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer[];
const char
    kClassPath_org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer[] =
    "org/webrtc/MediaCodecVideoDecoder$DecodedTextureBuffer";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_MediaCodecVideoDecoder_00024VideoCodecType[];
const char kClassPath_org_webrtc_MediaCodecVideoDecoder_00024VideoCodecType[] =
    "org/webrtc/MediaCodecVideoDecoder$VideoCodecType";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_clazz = 0;
#ifndef org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_clazz_defined
#define org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_clazz_defined
inline jclass
    org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer,
      &g_org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_clazz = 0;
#ifndef org_webrtc_MediaCodecVideoDecoder_clazz_defined
#define org_webrtc_MediaCodecVideoDecoder_clazz_defined
inline jclass org_webrtc_MediaCodecVideoDecoder_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_MediaCodecVideoDecoder,
      &g_org_webrtc_MediaCodecVideoDecoder_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_clazz = 0;
#ifndef org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_clazz_defined
#define org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_clazz_defined
inline jclass
    org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer,
      &g_org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_00024VideoCodecType_clazz = 0;
#ifndef org_webrtc_MediaCodecVideoDecoder_00024VideoCodecType_clazz_defined
#define org_webrtc_MediaCodecVideoDecoder_00024VideoCodecType_clazz_defined
inline jclass
    org_webrtc_MediaCodecVideoDecoder_00024VideoCodecType_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_MediaCodecVideoDecoder_00024VideoCodecType,
      &g_org_webrtc_MediaCodecVideoDecoder_00024VideoCodecType_clazz);
}
#endif

// Step 2: method stubs.

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_00024VideoCodecType_fromNativeIndex = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_VideoCodecType_fromNativeIndex(JNIEnv* env, JniIntWrapper nativeIndex)
    {
  CHECK_CLAZZ(env,
      org_webrtc_MediaCodecVideoDecoder_00024VideoCodecType_clazz(env),
      org_webrtc_MediaCodecVideoDecoder_00024VideoCodecType_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_MediaCodecVideoDecoder_00024VideoCodecType_clazz(env),
      "fromNativeIndex",
"("
"I"
")"
"Lorg/webrtc/MediaCodecVideoDecoder$VideoCodecType;",
      &g_org_webrtc_MediaCodecVideoDecoder_00024VideoCodecType_fromNativeIndex);

  jobject ret =
env->CallStaticObjectMethod(org_webrtc_MediaCodecVideoDecoder_00024VideoCodecType_clazz(env),
          method_id, as_jint(nativeIndex));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_isVp8HwSupported = 0;
static jboolean Java_MediaCodecVideoDecoder_isVp8HwSupported(JNIEnv* env) {
  CHECK_CLAZZ(env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      org_webrtc_MediaCodecVideoDecoder_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "isVp8HwSupported",
"("
")"
"Z",
      &g_org_webrtc_MediaCodecVideoDecoder_isVp8HwSupported);

  jboolean ret =
      env->CallStaticBooleanMethod(org_webrtc_MediaCodecVideoDecoder_clazz(env),
          method_id);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_isVp9HwSupported = 0;
static jboolean Java_MediaCodecVideoDecoder_isVp9HwSupported(JNIEnv* env) {
  CHECK_CLAZZ(env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      org_webrtc_MediaCodecVideoDecoder_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "isVp9HwSupported",
"("
")"
"Z",
      &g_org_webrtc_MediaCodecVideoDecoder_isVp9HwSupported);

  jboolean ret =
      env->CallStaticBooleanMethod(org_webrtc_MediaCodecVideoDecoder_clazz(env),
          method_id);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_isH264HwSupported = 0;
static jboolean Java_MediaCodecVideoDecoder_isH264HwSupported(JNIEnv* env) {
  CHECK_CLAZZ(env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      org_webrtc_MediaCodecVideoDecoder_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "isH264HwSupported",
"("
")"
"Z",
      &g_org_webrtc_MediaCodecVideoDecoder_isH264HwSupported);

  jboolean ret =
      env->CallStaticBooleanMethod(org_webrtc_MediaCodecVideoDecoder_clazz(env),
          method_id);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_isH264HighProfileHwSupported = 0;
static jboolean Java_MediaCodecVideoDecoder_isH264HighProfileHwSupported(JNIEnv*
    env) {
  CHECK_CLAZZ(env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      org_webrtc_MediaCodecVideoDecoder_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "isH264HighProfileHwSupported",
"("
")"
"Z",
      &g_org_webrtc_MediaCodecVideoDecoder_isH264HighProfileHwSupported);

  jboolean ret =
      env->CallStaticBooleanMethod(org_webrtc_MediaCodecVideoDecoder_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_webrtc_MediaCodecVideoDecoder_Constructor
    = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_MediaCodecVideoDecoder_Constructor(JNIEnv* env) {
  CHECK_CLAZZ(env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      org_webrtc_MediaCodecVideoDecoder_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "<init>",
"("
")"
"V",
      &g_org_webrtc_MediaCodecVideoDecoder_Constructor);

  jobject ret =
      env->NewObject(org_webrtc_MediaCodecVideoDecoder_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_MediaCodecVideoDecoder_initDecode =
    0;
static jboolean Java_MediaCodecVideoDecoder_initDecode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    type,
    JniIntWrapper width,
    JniIntWrapper height,
    const base::android::JavaRef<jobject>& surfaceTextureHelper) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "initDecode",
"("
"Lorg/webrtc/MediaCodecVideoDecoder$VideoCodecType;"
"I"
"I"
"Lorg/webrtc/SurfaceTextureHelper;"
")"
"Z",
      &g_org_webrtc_MediaCodecVideoDecoder_initDecode);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, type.obj(), as_jint(width), as_jint(height),
              surfaceTextureHelper.obj());
  return ret;
}

static base::subtle::AtomicWord g_org_webrtc_MediaCodecVideoDecoder_reset = 0;
static void Java_MediaCodecVideoDecoder_reset(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper width,
    JniIntWrapper height) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "reset",
"("
"I"
"I"
")"
"V",
      &g_org_webrtc_MediaCodecVideoDecoder_reset);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(width), as_jint(height));
}

static base::subtle::AtomicWord g_org_webrtc_MediaCodecVideoDecoder_release = 0;
static void Java_MediaCodecVideoDecoder_release(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "release",
"("
")"
"V",
      &g_org_webrtc_MediaCodecVideoDecoder_release);

     env->CallVoidMethod(obj.obj(),
          method_id);
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_dequeueInputBuffer = 0;
static jint Java_MediaCodecVideoDecoder_dequeueInputBuffer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "dequeueInputBuffer",
"("
")"
"I",
      &g_org_webrtc_MediaCodecVideoDecoder_dequeueInputBuffer);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_queueInputBuffer = 0;
static jboolean Java_MediaCodecVideoDecoder_queueInputBuffer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper inputBufferIndex,
    JniIntWrapper size,
    jlong presentationTimeStamUs,
    jlong timeStampMs,
    jlong ntpTimeStamp) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "queueInputBuffer",
"("
"I"
"I"
"J"
"J"
"J"
")"
"Z",
      &g_org_webrtc_MediaCodecVideoDecoder_queueInputBuffer);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, as_jint(inputBufferIndex), as_jint(size),
              presentationTimeStamUs, timeStampMs, ntpTimeStamp);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_getIndex = 0;
static jint Java_DecodedOutputBuffer_getIndex(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env,
          org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_clazz(env),
      "getIndex",
"("
")"
"I",
      &g_org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_getIndex);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_getOffset = 0;
static jint Java_DecodedOutputBuffer_getOffset(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env,
          org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_clazz(env),
      "getOffset",
"("
")"
"I",
      &g_org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_getOffset);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_getSize = 0;
static jint Java_DecodedOutputBuffer_getSize(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env,
          org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_clazz(env),
      "getSize",
"("
")"
"I",
      &g_org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_getSize);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_getPresentationTimestampMs
    = 0;
static jlong Java_DecodedOutputBuffer_getPresentationTimestampMs(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env,
          org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_clazz(env),
      "getPresentationTimestampMs",
"("
")"
"J",
&g_org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_getPresentationTimestampMs);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_getTimestampMs
    = 0;
static jlong Java_DecodedOutputBuffer_getTimestampMs(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env,
          org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_clazz(env),
      "getTimestampMs",
"("
")"
"J",
&g_org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_getTimestampMs);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_getNtpTimestampMs
    = 0;
static jlong Java_DecodedOutputBuffer_getNtpTimestampMs(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env,
          org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_clazz(env),
      "getNtpTimestampMs",
"("
")"
"J",
&g_org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_getNtpTimestampMs);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_getDecodeTimeMs
    = 0;
static jlong Java_DecodedOutputBuffer_getDecodeTimeMs(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env,
          org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_clazz(env),
      "getDecodeTimeMs",
"("
")"
"J",
&g_org_webrtc_MediaCodecVideoDecoder_00024DecodedOutputBuffer_getDecodeTimeMs);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_getTextureId =
    0;
static jint Java_DecodedTextureBuffer_getTextureId(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_clazz(env),
          0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env,
          org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_clazz(env),
      "getTextureId",
"("
")"
"I",
&g_org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_getTextureId);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_getTransformMatrix
    = 0;
static base::android::ScopedJavaLocalRef<jfloatArray>
    Java_DecodedTextureBuffer_getTransformMatrix(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_clazz(env),
          NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env,
          org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_clazz(env),
      "getTransformMatrix",
"("
")"
"[F",
&g_org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_getTransformMatrix);

  jfloatArray ret =
      static_cast<jfloatArray>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jfloatArray>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_getPresentationTimestampMs
    = 0;
static jlong Java_DecodedTextureBuffer_getPresentationTimestampMs(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_clazz(env),
          0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env,
          org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_clazz(env),
      "getPresentationTimestampMs",
"("
")"
"J",
&g_org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_getPresentationTimestampMs);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_getTimeStampMs
    = 0;
static jlong Java_DecodedTextureBuffer_getTimeStampMs(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_clazz(env),
          0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env,
          org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_clazz(env),
      "getTimeStampMs",
"("
")"
"J",
&g_org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_getTimeStampMs);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_getNtpTimestampMs
    = 0;
static jlong Java_DecodedTextureBuffer_getNtpTimestampMs(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_clazz(env),
          0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env,
          org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_clazz(env),
      "getNtpTimestampMs",
"("
")"
"J",
&g_org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_getNtpTimestampMs);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_getDecodeTimeMs
    = 0;
static jlong Java_DecodedTextureBuffer_getDecodeTimeMs(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_clazz(env),
          0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env,
          org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_clazz(env),
      "getDecodeTimeMs",
"("
")"
"J",
&g_org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_getDecodeTimeMs);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_getFrameDelayMs
    = 0;
static jlong Java_DecodedTextureBuffer_getFrameDelayMs(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_clazz(env),
          0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env,
          org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_clazz(env),
      "getFrameDelayMs",
"("
")"
"J",
&g_org_webrtc_MediaCodecVideoDecoder_00024DecodedTextureBuffer_getFrameDelayMs);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_dequeueOutputBuffer = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_MediaCodecVideoDecoder_dequeueOutputBuffer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper dequeueTimeoutMs) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "dequeueOutputBuffer",
"("
"I"
")"
"Lorg/webrtc/MediaCodecVideoDecoder$DecodedOutputBuffer;",
      &g_org_webrtc_MediaCodecVideoDecoder_dequeueOutputBuffer);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, as_jint(dequeueTimeoutMs));
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_dequeueTextureBuffer = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_MediaCodecVideoDecoder_dequeueTextureBuffer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper dequeueTimeoutMs) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "dequeueTextureBuffer",
"("
"I"
")"
"Lorg/webrtc/MediaCodecVideoDecoder$DecodedTextureBuffer;",
      &g_org_webrtc_MediaCodecVideoDecoder_dequeueTextureBuffer);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, as_jint(dequeueTimeoutMs));
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_returnDecodedOutputBuffer = 0;
static void Java_MediaCodecVideoDecoder_returnDecodedOutputBuffer(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, JniIntWrapper index) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "returnDecodedOutputBuffer",
"("
"I"
")"
"V",
      &g_org_webrtc_MediaCodecVideoDecoder_returnDecodedOutputBuffer);

     env->CallVoidMethod(obj.obj(),
          method_id, as_jint(index));
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_getInputBuffers = 0;
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_MediaCodecVideoDecoder_getInputBuffers(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "getInputBuffers",
"("
")"
"[Ljava/nio/ByteBuffer;",
      &g_org_webrtc_MediaCodecVideoDecoder_getInputBuffers);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_getOutputBuffers = 0;
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_MediaCodecVideoDecoder_getOutputBuffers(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "getOutputBuffers",
"("
")"
"[Ljava/nio/ByteBuffer;",
      &g_org_webrtc_MediaCodecVideoDecoder_getOutputBuffers);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_getColorFormat = 0;
static jint Java_MediaCodecVideoDecoder_getColorFormat(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "getColorFormat",
"("
")"
"I",
      &g_org_webrtc_MediaCodecVideoDecoder_getColorFormat);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_webrtc_MediaCodecVideoDecoder_getWidth =
    0;
static jint Java_MediaCodecVideoDecoder_getWidth(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "getWidth",
"("
")"
"I",
      &g_org_webrtc_MediaCodecVideoDecoder_getWidth);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_webrtc_MediaCodecVideoDecoder_getHeight =
    0;
static jint Java_MediaCodecVideoDecoder_getHeight(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "getHeight",
"("
")"
"I",
      &g_org_webrtc_MediaCodecVideoDecoder_getHeight);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_webrtc_MediaCodecVideoDecoder_getStride =
    0;
static jint Java_MediaCodecVideoDecoder_getStride(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "getStride",
"("
")"
"I",
      &g_org_webrtc_MediaCodecVideoDecoder_getStride);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoDecoder_getSliceHeight = 0;
static jint Java_MediaCodecVideoDecoder_getSliceHeight(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoDecoder_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoDecoder_clazz(env),
      "getSliceHeight",
"("
")"
"I",
      &g_org_webrtc_MediaCodecVideoDecoder_getSliceHeight);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

#endif  // org_webrtc_MediaCodecVideoDecoder_JNI
