// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base\android\jni_generator\jni_generator.py
// For
//     org/webrtc/VP8Encoder

#ifndef org_webrtc_VP8Encoder_JNI
#define org_webrtc_VP8Encoder_JNI

#include "sdk/android/src/jni/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char kClassPath_org_webrtc_VP8Encoder[];
const char kClassPath_org_webrtc_VP8Encoder[] = "org/webrtc/VP8Encoder";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_webrtc_VP8Encoder_clazz =
    0;
#ifndef org_webrtc_VP8Encoder_clazz_defined
#define org_webrtc_VP8Encoder_clazz_defined
inline jclass org_webrtc_VP8Encoder_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_webrtc_VP8Encoder,
      &g_org_webrtc_VP8Encoder_clazz);
}
#endif

namespace webrtc {
namespace jni {

// Step 2: method stubs.

static jlong JNI_VP8Encoder_CreateEncoder(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller);

JNI_GENERATOR_EXPORT jlong
    Java_org_webrtc_VP8Encoder_nativeCreateEncoder(JNIEnv* env, jclass jcaller)
    {
  return JNI_VP8Encoder_CreateEncoder(env,
      base::android::JavaParamRef<jclass>(env, jcaller));
}

}  // namespace jni
}  // namespace webrtc

#endif  // org_webrtc_VP8Encoder_JNI
