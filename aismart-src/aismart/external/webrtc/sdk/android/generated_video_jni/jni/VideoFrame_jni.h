// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base\android\jni_generator\jni_generator.py
// For
//     org/webrtc/VideoFrame

#ifndef org_webrtc_VideoFrame_JNI
#define org_webrtc_VideoFrame_JNI

#include "sdk/android/src/jni/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_VideoFrame_00024Buffer[];
const char kClassPath_org_webrtc_VideoFrame_00024Buffer[] =
    "org/webrtc/VideoFrame$Buffer";

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_webrtc_VideoFrame[];
const char kClassPath_org_webrtc_VideoFrame[] = "org/webrtc/VideoFrame";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_VideoFrame_00024I420Buffer[];
const char kClassPath_org_webrtc_VideoFrame_00024I420Buffer[] =
    "org/webrtc/VideoFrame$I420Buffer";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_VideoFrame_00024Buffer_clazz = 0;
#ifndef org_webrtc_VideoFrame_00024Buffer_clazz_defined
#define org_webrtc_VideoFrame_00024Buffer_clazz_defined
inline jclass org_webrtc_VideoFrame_00024Buffer_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_VideoFrame_00024Buffer,
      &g_org_webrtc_VideoFrame_00024Buffer_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_org_webrtc_VideoFrame_clazz =
    0;
#ifndef org_webrtc_VideoFrame_clazz_defined
#define org_webrtc_VideoFrame_clazz_defined
inline jclass org_webrtc_VideoFrame_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_webrtc_VideoFrame,
      &g_org_webrtc_VideoFrame_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_VideoFrame_00024I420Buffer_clazz = 0;
#ifndef org_webrtc_VideoFrame_00024I420Buffer_clazz_defined
#define org_webrtc_VideoFrame_00024I420Buffer_clazz_defined
inline jclass org_webrtc_VideoFrame_00024I420Buffer_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_VideoFrame_00024I420Buffer,
      &g_org_webrtc_VideoFrame_00024I420Buffer_clazz);
}
#endif

namespace webrtc {
namespace jni {

// Step 2: method stubs.

static void JNI_VideoFrame_CropAndScaleI420(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    const base::android::JavaParamRef<jobject>& srcY,
    jint srcStrideY,
    const base::android::JavaParamRef<jobject>& srcU,
    jint srcStrideU,
    const base::android::JavaParamRef<jobject>& srcV,
    jint srcStrideV,
    jint cropX,
    jint cropY,
    jint cropWidth,
    jint cropHeight,
    const base::android::JavaParamRef<jobject>& dstY,
    jint dstStrideY,
    const base::android::JavaParamRef<jobject>& dstU,
    jint dstStrideU,
    const base::android::JavaParamRef<jobject>& dstV,
    jint dstStrideV,
    jint scaleWidth,
    jint scaleHeight);

JNI_GENERATOR_EXPORT void
    Java_org_webrtc_VideoFrame_nativeCropAndScaleI420(JNIEnv* env, jclass
    jcaller,
    jobject srcY,
    jint srcStrideY,
    jobject srcU,
    jint srcStrideU,
    jobject srcV,
    jint srcStrideV,
    jint cropX,
    jint cropY,
    jint cropWidth,
    jint cropHeight,
    jobject dstY,
    jint dstStrideY,
    jobject dstU,
    jint dstStrideU,
    jobject dstV,
    jint dstStrideV,
    jint scaleWidth,
    jint scaleHeight) {
  return JNI_VideoFrame_CropAndScaleI420(env,
      base::android::JavaParamRef<jclass>(env, jcaller),
      base::android::JavaParamRef<jobject>(env, srcY), srcStrideY,
      base::android::JavaParamRef<jobject>(env, srcU), srcStrideU,
      base::android::JavaParamRef<jobject>(env, srcV), srcStrideV, cropX, cropY,
      cropWidth, cropHeight, base::android::JavaParamRef<jobject>(env, dstY),
      dstStrideY, base::android::JavaParamRef<jobject>(env, dstU), dstStrideU,
      base::android::JavaParamRef<jobject>(env, dstV), dstStrideV, scaleWidth,
      scaleHeight);
}

static base::subtle::AtomicWord g_org_webrtc_VideoFrame_00024Buffer_getWidth =
    0;
static jint Java_Buffer_getWidth(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoFrame_00024Buffer_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_VideoFrame_00024Buffer_clazz(env),
      "getWidth",
"("
")"
"I",
      &g_org_webrtc_VideoFrame_00024Buffer_getWidth);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_webrtc_VideoFrame_00024Buffer_getHeight =
    0;
static jint Java_Buffer_getHeight(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoFrame_00024Buffer_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_VideoFrame_00024Buffer_clazz(env),
      "getHeight",
"("
")"
"I",
      &g_org_webrtc_VideoFrame_00024Buffer_getHeight);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_webrtc_VideoFrame_00024Buffer_toI420 = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_Buffer_toI420(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoFrame_00024Buffer_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_VideoFrame_00024Buffer_clazz(env),
      "toI420",
"("
")"
"Lorg/webrtc/VideoFrame$I420Buffer;",
      &g_org_webrtc_VideoFrame_00024Buffer_toI420);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_VideoFrame_00024Buffer_retain = 0;
static void Java_Buffer_retain(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoFrame_00024Buffer_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_VideoFrame_00024Buffer_clazz(env),
      "retain",
"("
")"
"V",
      &g_org_webrtc_VideoFrame_00024Buffer_retain);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_webrtc_VideoFrame_00024Buffer_release = 0;
static void Java_Buffer_release(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoFrame_00024Buffer_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_VideoFrame_00024Buffer_clazz(env),
      "release",
"("
")"
"V",
      &g_org_webrtc_VideoFrame_00024Buffer_release);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_webrtc_VideoFrame_00024Buffer_cropAndScale
    = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_Buffer_cropAndScale(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, JniIntWrapper cropX,
    JniIntWrapper cropY,
    JniIntWrapper cropWidth,
    JniIntWrapper cropHeight,
    JniIntWrapper scaleWidth,
    JniIntWrapper scaleHeight) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoFrame_00024Buffer_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_VideoFrame_00024Buffer_clazz(env),
      "cropAndScale",
"("
"I"
"I"
"I"
"I"
"I"
"I"
")"
"Lorg/webrtc/VideoFrame$Buffer;",
      &g_org_webrtc_VideoFrame_00024Buffer_cropAndScale);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, as_jint(cropX), as_jint(cropY), as_jint(cropWidth),
              as_jint(cropHeight), as_jint(scaleWidth), as_jint(scaleHeight));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_VideoFrame_00024I420Buffer_getDataY
    = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_I420Buffer_getDataY(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoFrame_00024I420Buffer_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_VideoFrame_00024I420Buffer_clazz(env),
      "getDataY",
"("
")"
"Ljava/nio/ByteBuffer;",
      &g_org_webrtc_VideoFrame_00024I420Buffer_getDataY);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_VideoFrame_00024I420Buffer_getDataU
    = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_I420Buffer_getDataU(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoFrame_00024I420Buffer_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_VideoFrame_00024I420Buffer_clazz(env),
      "getDataU",
"("
")"
"Ljava/nio/ByteBuffer;",
      &g_org_webrtc_VideoFrame_00024I420Buffer_getDataU);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_VideoFrame_00024I420Buffer_getDataV
    = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_I420Buffer_getDataV(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoFrame_00024I420Buffer_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_VideoFrame_00024I420Buffer_clazz(env),
      "getDataV",
"("
")"
"Ljava/nio/ByteBuffer;",
      &g_org_webrtc_VideoFrame_00024I420Buffer_getDataV);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_VideoFrame_00024I420Buffer_getStrideY = 0;
static jint Java_I420Buffer_getStrideY(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoFrame_00024I420Buffer_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_VideoFrame_00024I420Buffer_clazz(env),
      "getStrideY",
"("
")"
"I",
      &g_org_webrtc_VideoFrame_00024I420Buffer_getStrideY);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_VideoFrame_00024I420Buffer_getStrideU = 0;
static jint Java_I420Buffer_getStrideU(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoFrame_00024I420Buffer_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_VideoFrame_00024I420Buffer_clazz(env),
      "getStrideU",
"("
")"
"I",
      &g_org_webrtc_VideoFrame_00024I420Buffer_getStrideU);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_VideoFrame_00024I420Buffer_getStrideV = 0;
static jint Java_I420Buffer_getStrideV(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoFrame_00024I420Buffer_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_VideoFrame_00024I420Buffer_clazz(env),
      "getStrideV",
"("
")"
"I",
      &g_org_webrtc_VideoFrame_00024I420Buffer_getStrideV);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_webrtc_VideoFrame_Constructor = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_VideoFrame_Constructor(JNIEnv* env, const
    base::android::JavaRef<jobject>& buffer,
    JniIntWrapper rotation,
    jlong timestampNs) {
  CHECK_CLAZZ(env, org_webrtc_VideoFrame_clazz(env),
      org_webrtc_VideoFrame_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_VideoFrame_clazz(env),
      "<init>",
"("
"Lorg/webrtc/VideoFrame$Buffer;"
"I"
"J"
")"
"V",
      &g_org_webrtc_VideoFrame_Constructor);

  jobject ret =
      env->NewObject(org_webrtc_VideoFrame_clazz(env),
          method_id, buffer.obj(), as_jint(rotation), timestampNs);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_VideoFrame_getBuffer = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_VideoFrame_getBuffer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoFrame_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_VideoFrame_clazz(env),
      "getBuffer",
"("
")"
"Lorg/webrtc/VideoFrame$Buffer;",
      &g_org_webrtc_VideoFrame_getBuffer);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_VideoFrame_getRotation = 0;
static jint Java_VideoFrame_getRotation(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoFrame_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_VideoFrame_clazz(env),
      "getRotation",
"("
")"
"I",
      &g_org_webrtc_VideoFrame_getRotation);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_webrtc_VideoFrame_getTimestampNs = 0;
static jlong Java_VideoFrame_getTimestampNs(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_VideoFrame_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_VideoFrame_clazz(env),
      "getTimestampNs",
"("
")"
"J",
      &g_org_webrtc_VideoFrame_getTimestampNs);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

}  // namespace jni
}  // namespace webrtc

#endif  // org_webrtc_VideoFrame_JNI
