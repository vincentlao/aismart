// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base\android\jni_generator\jni_generator.py
// For
//     org/webrtc/MediaCodecVideoEncoder

#ifndef org_webrtc_MediaCodecVideoEncoder_JNI
#define org_webrtc_MediaCodecVideoEncoder_JNI

#include "sdk/android/src/jni/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_MediaCodecVideoEncoder[];
const char kClassPath_org_webrtc_MediaCodecVideoEncoder[] =
    "org/webrtc/MediaCodecVideoEncoder";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo[];
const char kClassPath_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo[]
    = "org/webrtc/MediaCodecVideoEncoder$OutputBufferInfo";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType[];
const char kClassPath_org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType[] =
    "org/webrtc/MediaCodecVideoEncoder$VideoCodecType";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoEncoder_clazz = 0;
#ifndef org_webrtc_MediaCodecVideoEncoder_clazz_defined
#define org_webrtc_MediaCodecVideoEncoder_clazz_defined
inline jclass org_webrtc_MediaCodecVideoEncoder_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_MediaCodecVideoEncoder,
      &g_org_webrtc_MediaCodecVideoEncoder_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz = 0;
#ifndef org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz_defined
#define org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz_defined
inline jclass
    org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo,
      &g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz);
}
#endif

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_clazz = 0;
#ifndef org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_clazz_defined
#define org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_clazz_defined
inline jclass
    org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType,
      &g_org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_clazz);
}
#endif

namespace webrtc {
namespace jni {

// Step 2: method stubs.

static void JNI_MediaCodecVideoEncoder_FillInputBuffer(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong encoder,
    jint inputBuffer,
    const base::android::JavaParamRef<jobject>& dataY,
    jint strideY,
    const base::android::JavaParamRef<jobject>& dataU,
    jint strideU,
    const base::android::JavaParamRef<jobject>& dataV,
    jint strideV);

JNI_GENERATOR_EXPORT void
    Java_org_webrtc_MediaCodecVideoEncoder_nativeFillInputBuffer(JNIEnv* env,
    jclass jcaller,
    jlong encoder,
    jint inputBuffer,
    jobject dataY,
    jint strideY,
    jobject dataU,
    jint strideU,
    jobject dataV,
    jint strideV) {
  return JNI_MediaCodecVideoEncoder_FillInputBuffer(env,
      base::android::JavaParamRef<jclass>(env, jcaller), encoder, inputBuffer,
      base::android::JavaParamRef<jobject>(env, dataY), strideY,
      base::android::JavaParamRef<jobject>(env, dataU), strideU,
      base::android::JavaParamRef<jobject>(env, dataV), strideV);
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_fromNativeIndex = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_VideoCodecType_fromNativeIndex(JNIEnv* env, JniIntWrapper nativeIndex)
    {
  CHECK_CLAZZ(env,
      org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_clazz(env),
      org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_clazz(env),
      "fromNativeIndex",
"("
"I"
")"
"Lorg/webrtc/MediaCodecVideoEncoder$VideoCodecType;",
      &g_org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_fromNativeIndex);

  jobject ret =
env->CallStaticObjectMethod(org_webrtc_MediaCodecVideoEncoder_00024VideoCodecType_clazz(env),
          method_id, as_jint(nativeIndex));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoEncoder_isVp8HwSupported = 0;
static jboolean Java_MediaCodecVideoEncoder_isVp8HwSupported(JNIEnv* env) {
  CHECK_CLAZZ(env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      "isVp8HwSupported",
"("
")"
"Z",
      &g_org_webrtc_MediaCodecVideoEncoder_isVp8HwSupported);

  jboolean ret =
      env->CallStaticBooleanMethod(org_webrtc_MediaCodecVideoEncoder_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoEncoder_isVp9HwSupported = 0;
static jboolean Java_MediaCodecVideoEncoder_isVp9HwSupported(JNIEnv* env) {
  CHECK_CLAZZ(env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      "isVp9HwSupported",
"("
")"
"Z",
      &g_org_webrtc_MediaCodecVideoEncoder_isVp9HwSupported);

  jboolean ret =
      env->CallStaticBooleanMethod(org_webrtc_MediaCodecVideoEncoder_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoEncoder_isH264HwSupported = 0;
static jboolean Java_MediaCodecVideoEncoder_isH264HwSupported(JNIEnv* env) {
  CHECK_CLAZZ(env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      "isH264HwSupported",
"("
")"
"Z",
      &g_org_webrtc_MediaCodecVideoEncoder_isH264HwSupported);

  jboolean ret =
      env->CallStaticBooleanMethod(org_webrtc_MediaCodecVideoEncoder_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_org_webrtc_MediaCodecVideoEncoder_Constructor
    = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_MediaCodecVideoEncoder_Constructor(JNIEnv* env) {
  CHECK_CLAZZ(env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      "<init>",
"("
")"
"V",
      &g_org_webrtc_MediaCodecVideoEncoder_Constructor);

  jobject ret =
      env->NewObject(org_webrtc_MediaCodecVideoEncoder_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_MediaCodecVideoEncoder_initEncode =
    0;
static jboolean Java_MediaCodecVideoEncoder_initEncode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    type,
    JniIntWrapper profile,
    JniIntWrapper width,
    JniIntWrapper height,
    JniIntWrapper kbps,
    JniIntWrapper fps,
    const base::android::JavaRef<jobject>& sharedContext) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      "initEncode",
"("
"Lorg/webrtc/MediaCodecVideoEncoder$VideoCodecType;"
"I"
"I"
"I"
"I"
"I"
"Lorg/webrtc/EglBase14$Context;"
")"
"Z",
      &g_org_webrtc_MediaCodecVideoEncoder_initEncode);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, type.obj(), as_jint(profile), as_jint(width),
              as_jint(height), as_jint(kbps), as_jint(fps),
              sharedContext.obj());
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoEncoder_getInputBuffers = 0;
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_MediaCodecVideoEncoder_getInputBuffers(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      "getInputBuffers",
"("
")"
"[Ljava/nio/ByteBuffer;",
      &g_org_webrtc_MediaCodecVideoEncoder_getInputBuffers);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static base::subtle::AtomicWord g_org_webrtc_MediaCodecVideoEncoder_encodeBuffer
    = 0;
static jboolean Java_MediaCodecVideoEncoder_encodeBuffer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean isKeyframe,
    JniIntWrapper inputBuffer,
    JniIntWrapper size,
    jlong presentationTimestampUs) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      "encodeBuffer",
"("
"Z"
"I"
"I"
"J"
")"
"Z",
      &g_org_webrtc_MediaCodecVideoEncoder_encodeBuffer);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, isKeyframe, as_jint(inputBuffer), as_jint(size),
              presentationTimestampUs);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoEncoder_encodeTexture = 0;
static jboolean Java_MediaCodecVideoEncoder_encodeTexture(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean isKeyframe,
    JniIntWrapper oesTextureId,
    const base::android::JavaRef<jfloatArray>& transformationMatrix,
    jlong presentationTimestampUs) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      "encodeTexture",
"("
"Z"
"I"
"[F"
"J"
")"
"Z",
      &g_org_webrtc_MediaCodecVideoEncoder_encodeTexture);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, isKeyframe, as_jint(oesTextureId),
              transformationMatrix.obj(), presentationTimestampUs);
  return ret;
}

static base::subtle::AtomicWord g_org_webrtc_MediaCodecVideoEncoder_encodeFrame
    = 0;
static jboolean Java_MediaCodecVideoEncoder_encodeFrame(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong nativeEncoder,
    jboolean isKeyframe,
    const base::android::JavaRef<jobject>& frame,
    JniIntWrapper bufferIndex) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      "encodeFrame",
"("
"J"
"Z"
"Lorg/webrtc/VideoFrame;"
"I"
")"
"Z",
      &g_org_webrtc_MediaCodecVideoEncoder_encodeFrame);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, nativeEncoder, isKeyframe, frame.obj(),
              as_jint(bufferIndex));
  return ret;
}

static base::subtle::AtomicWord g_org_webrtc_MediaCodecVideoEncoder_release = 0;
static void Java_MediaCodecVideoEncoder_release(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      "release",
"("
")"
"V",
      &g_org_webrtc_MediaCodecVideoEncoder_release);

     env->CallVoidMethod(obj.obj(),
          method_id);
}

static base::subtle::AtomicWord g_org_webrtc_MediaCodecVideoEncoder_setRates =
    0;
static jboolean Java_MediaCodecVideoEncoder_setRates(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper kbps,
    JniIntWrapper frameRate) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      "setRates",
"("
"I"
"I"
")"
"Z",
      &g_org_webrtc_MediaCodecVideoEncoder_setRates);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, as_jint(kbps), as_jint(frameRate));
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoEncoder_dequeueInputBuffer = 0;
static jint Java_MediaCodecVideoEncoder_dequeueInputBuffer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      "dequeueInputBuffer",
"("
")"
"I",
      &g_org_webrtc_MediaCodecVideoEncoder_dequeueInputBuffer);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_getIndex = 0;
static jint Java_OutputBufferInfo_getIndex(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz(env),
      "getIndex",
"("
")"
"I",
      &g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_getIndex);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_getBuffer = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_OutputBufferInfo_getBuffer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz(env),
      "getBuffer",
"("
")"
"Ljava/nio/ByteBuffer;",
      &g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_getBuffer);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_isKeyFrame = 0;
static jboolean Java_OutputBufferInfo_isKeyFrame(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz(env),
          false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz(env),
      "isKeyFrame",
"("
")"
"Z",
      &g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_isKeyFrame);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_getPresentationTimestampUs
    = 0;
static jlong Java_OutputBufferInfo_getPresentationTimestampUs(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_clazz(env),
      "getPresentationTimestampUs",
"("
")"
"J",
&g_org_webrtc_MediaCodecVideoEncoder_00024OutputBufferInfo_getPresentationTimestampUs);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoEncoder_dequeueOutputBuffer = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_MediaCodecVideoEncoder_dequeueOutputBuffer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      "dequeueOutputBuffer",
"("
")"
"Lorg/webrtc/MediaCodecVideoEncoder$OutputBufferInfo;",
      &g_org_webrtc_MediaCodecVideoEncoder_dequeueOutputBuffer);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoEncoder_releaseOutputBuffer = 0;
static jboolean Java_MediaCodecVideoEncoder_releaseOutputBuffer(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj, JniIntWrapper index) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      "releaseOutputBuffer",
"("
"I"
")"
"Z",
      &g_org_webrtc_MediaCodecVideoEncoder_releaseOutputBuffer);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, as_jint(index));
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoEncoder_getColorFormat = 0;
static jint Java_MediaCodecVideoEncoder_getColorFormat(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      "getColorFormat",
"("
")"
"I",
      &g_org_webrtc_MediaCodecVideoEncoder_getColorFormat);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_MediaCodecVideoEncoder_isTextureBuffer = 0;
static jboolean Java_MediaCodecVideoEncoder_isTextureBuffer(JNIEnv* env, const
    base::android::JavaRef<jobject>& buffer) {
  CHECK_CLAZZ(env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      org_webrtc_MediaCodecVideoEncoder_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_MediaCodecVideoEncoder_clazz(env),
      "isTextureBuffer",
"("
"Lorg/webrtc/VideoFrame$Buffer;"
")"
"Z",
      &g_org_webrtc_MediaCodecVideoEncoder_isTextureBuffer);

  jboolean ret =
      env->CallStaticBooleanMethod(org_webrtc_MediaCodecVideoEncoder_clazz(env),
          method_id, buffer.obj());
  jni_generator::CheckException(env);
  return ret;
}

}  // namespace jni
}  // namespace webrtc

#endif  // org_webrtc_MediaCodecVideoEncoder_JNI
