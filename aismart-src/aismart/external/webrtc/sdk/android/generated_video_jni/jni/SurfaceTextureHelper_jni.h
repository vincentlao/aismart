// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base\android\jni_generator\jni_generator.py
// For
//     org/webrtc/SurfaceTextureHelper

#ifndef org_webrtc_SurfaceTextureHelper_JNI
#define org_webrtc_SurfaceTextureHelper_JNI

#include "sdk/android/src/jni/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_SurfaceTextureHelper[];
const char kClassPath_org_webrtc_SurfaceTextureHelper[] =
    "org/webrtc/SurfaceTextureHelper";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_SurfaceTextureHelper_clazz = 0;
#ifndef org_webrtc_SurfaceTextureHelper_clazz_defined
#define org_webrtc_SurfaceTextureHelper_clazz_defined
inline jclass org_webrtc_SurfaceTextureHelper_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_SurfaceTextureHelper,
      &g_org_webrtc_SurfaceTextureHelper_clazz);
}
#endif

// Step 2: method stubs.

static base::subtle::AtomicWord g_org_webrtc_SurfaceTextureHelper_create = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_SurfaceTextureHelper_create(JNIEnv* env, const
    base::android::JavaRef<jstring>& threadName,
    const base::android::JavaRef<jobject>& sharedContext) {
  CHECK_CLAZZ(env, org_webrtc_SurfaceTextureHelper_clazz(env),
      org_webrtc_SurfaceTextureHelper_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_SurfaceTextureHelper_clazz(env),
      "create",
"("
"Ljava/lang/String;"
"Lorg/webrtc/EglBase$Context;"
")"
"Lorg/webrtc/SurfaceTextureHelper;",
      &g_org_webrtc_SurfaceTextureHelper_create);

  jobject ret =
      env->CallStaticObjectMethod(org_webrtc_SurfaceTextureHelper_clazz(env),
          method_id, threadName.obj(), sharedContext.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_SurfaceTextureHelper_returnTextureFrame = 0;
static void Java_SurfaceTextureHelper_returnTextureFrame(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_SurfaceTextureHelper_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_SurfaceTextureHelper_clazz(env),
      "returnTextureFrame",
"("
")"
"V",
      &g_org_webrtc_SurfaceTextureHelper_returnTextureFrame);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_webrtc_SurfaceTextureHelper_dispose = 0;
static void Java_SurfaceTextureHelper_dispose(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_SurfaceTextureHelper_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_SurfaceTextureHelper_clazz(env),
      "dispose",
"("
")"
"V",
      &g_org_webrtc_SurfaceTextureHelper_dispose);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_org_webrtc_SurfaceTextureHelper_textureToYUV =
    0;
static void Java_SurfaceTextureHelper_textureToYUV(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    buf,
    JniIntWrapper width,
    JniIntWrapper height,
    JniIntWrapper stride,
    JniIntWrapper textureId,
    const base::android::JavaRef<jfloatArray>& transformMatrix) {
  CHECK_CLAZZ(env, obj.obj(),
      org_webrtc_SurfaceTextureHelper_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, org_webrtc_SurfaceTextureHelper_clazz(env),
      "textureToYUV",
"("
"Ljava/nio/ByteBuffer;"
"I"
"I"
"I"
"I"
"[F"
")"
"V",
      &g_org_webrtc_SurfaceTextureHelper_textureToYUV);

     env->CallVoidMethod(obj.obj(),
          method_id, buf.obj(), as_jint(width), as_jint(height),
              as_jint(stride), as_jint(textureId), transformMatrix.obj());
  jni_generator::CheckException(env);
}

#endif  // org_webrtc_SurfaceTextureHelper_JNI
