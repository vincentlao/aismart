// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/webrtc/VideoEncoderWrapper

#ifndef org_webrtc_VideoEncoderWrapper_JNI
#define org_webrtc_VideoEncoderWrapper_JNI

#include "sdk/android/src/jni/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_webrtc_VideoEncoderWrapper[];
const char kClassPath_org_webrtc_VideoEncoderWrapper[] =
    "org/webrtc/VideoEncoderWrapper";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord
    g_org_webrtc_VideoEncoderWrapper_clazz = 0;
#ifndef org_webrtc_VideoEncoderWrapper_clazz_defined
#define org_webrtc_VideoEncoderWrapper_clazz_defined
inline jclass org_webrtc_VideoEncoderWrapper_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_webrtc_VideoEncoderWrapper,
      &g_org_webrtc_VideoEncoderWrapper_clazz);
}
#endif

// Step 2: method stubs.

static void JNI_VideoEncoderWrapper_OnEncodedFrame(JNIEnv* env, const
    base::android::JavaParamRef<jclass>& jcaller,
    jlong nativeEncoder,
    const base::android::JavaParamRef<jobject>& buffer,
    jint encodedWidth,
    jint encodedHeight,
    jlong captureTimeNs,
    jint frameType,
    jint rotation,
    jboolean completeFrame,
    const base::android::JavaParamRef<jobject>& qp)
{}

JNI_GENERATOR_EXPORT void
    Java_org_webrtc_VideoEncoderWrapper_nativeOnEncodedFrame(JNIEnv* env, jclass
    jcaller,
    jlong nativeEncoder,
    jobject buffer,
    jint encodedWidth,
    jint encodedHeight,
    jlong captureTimeNs,
    jint frameType,
    jint rotation,
    jboolean completeFrame,
    jobject qp) {
  return JNI_VideoEncoderWrapper_OnEncodedFrame(env,
      base::android::JavaParamRef<jclass>(env, jcaller), nativeEncoder,
      base::android::JavaParamRef<jobject>(env, buffer), encodedWidth,
      encodedHeight, captureTimeNs, frameType, rotation, completeFrame,
      base::android::JavaParamRef<jobject>(env, qp));
}

static base::subtle::AtomicWord
    g_org_webrtc_VideoEncoderWrapper_getScalingSettingsOn = 0;
static jboolean Java_VideoEncoderWrapper_getScalingSettingsOn(JNIEnv* env, const
    base::android::JavaRef<jobject>& scalingSettings) {
  CHECK_CLAZZ(env, org_webrtc_VideoEncoderWrapper_clazz(env),
      org_webrtc_VideoEncoderWrapper_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_VideoEncoderWrapper_clazz(env),
      "getScalingSettingsOn",
"("
"Lorg/webrtc/VideoEncoder$ScalingSettings;"
")"
"Z",
      &g_org_webrtc_VideoEncoderWrapper_getScalingSettingsOn);

  jboolean ret =
      env->CallStaticBooleanMethod(org_webrtc_VideoEncoderWrapper_clazz(env),
          method_id, scalingSettings.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord
    g_org_webrtc_VideoEncoderWrapper_getScalingSettingsLow = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_VideoEncoderWrapper_getScalingSettingsLow(JNIEnv* env, const
    base::android::JavaRef<jobject>& scalingSettings) {
  CHECK_CLAZZ(env, org_webrtc_VideoEncoderWrapper_clazz(env),
      org_webrtc_VideoEncoderWrapper_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_VideoEncoderWrapper_clazz(env),
      "getScalingSettingsLow",
"("
"Lorg/webrtc/VideoEncoder$ScalingSettings;"
")"
"Ljava/lang/Integer;",
      &g_org_webrtc_VideoEncoderWrapper_getScalingSettingsLow);

  jobject ret =
      env->CallStaticObjectMethod(org_webrtc_VideoEncoderWrapper_clazz(env),
          method_id, scalingSettings.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_VideoEncoderWrapper_getScalingSettingsHigh = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_VideoEncoderWrapper_getScalingSettingsHigh(JNIEnv* env, const
    base::android::JavaRef<jobject>& scalingSettings) {
  CHECK_CLAZZ(env, org_webrtc_VideoEncoderWrapper_clazz(env),
      org_webrtc_VideoEncoderWrapper_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_VideoEncoderWrapper_clazz(env),
      "getScalingSettingsHigh",
"("
"Lorg/webrtc/VideoEncoder$ScalingSettings;"
")"
"Ljava/lang/Integer;",
      &g_org_webrtc_VideoEncoderWrapper_getScalingSettingsHigh);

  jobject ret =
      env->CallStaticObjectMethod(org_webrtc_VideoEncoderWrapper_clazz(env),
          method_id, scalingSettings.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_org_webrtc_VideoEncoderWrapper_createEncoderCallback = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_VideoEncoderWrapper_createEncoderCallback(JNIEnv* env, jlong
    nativeEncoder) {
  CHECK_CLAZZ(env, org_webrtc_VideoEncoderWrapper_clazz(env),
      org_webrtc_VideoEncoderWrapper_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, org_webrtc_VideoEncoderWrapper_clazz(env),
      "createEncoderCallback",
"("
"J"
")"
"Lorg/webrtc/VideoEncoder$Callback;",
      &g_org_webrtc_VideoEncoderWrapper_createEncoderCallback);

  jobject ret =
      env->CallStaticObjectMethod(org_webrtc_VideoEncoderWrapper_clazz(env),
          method_id, nativeEncoder);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

#endif  // org_webrtc_VideoEncoderWrapper_JNI
