// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     java/math/BigInteger

#ifndef java_math_BigInteger_JNI
#define java_math_BigInteger_JNI

#include "sdk/android/src/jni/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char kClassPath_java_math_BigInteger[];
const char kClassPath_java_math_BigInteger[] = "java/math/BigInteger";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_java_math_BigInteger_clazz =
    0;
#ifndef java_math_BigInteger_clazz_defined
#define java_math_BigInteger_clazz_defined
inline jclass java_math_BigInteger_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_java_math_BigInteger,
      &g_java_math_BigInteger_clazz);
}
#endif

namespace JNI_BigInteger {

// Step 2: method stubs.

static base::subtle::AtomicWord g_java_math_BigInteger_probablePrime = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_probablePrime(JNIEnv* env, JniIntWrapper p0,
    const base::android::JavaRef<jobject>& p1) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_probablePrime(JNIEnv* env, JniIntWrapper p0,
    const base::android::JavaRef<jobject>& p1) {
  CHECK_CLAZZ(env, java_math_BigInteger_clazz(env),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_math_BigInteger_clazz(env),
      "probablePrime",
      "(ILjava/util/Random;)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_probablePrime);

  jobject ret =
      env->CallStaticObjectMethod(java_math_BigInteger_clazz(env),
          method_id, as_jint(p0), p1.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_nextProbablePrime = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_nextProbablePrime(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_nextProbablePrime(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "nextProbablePrime",
      "()Ljava/math/BigInteger;",
      &g_java_math_BigInteger_nextProbablePrime);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_primeToCertainty = 0;
static jboolean Java_BigInteger_primeToCertainty(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper p0,
    const base::android::JavaRef<jobject>& p1) __attribute__ ((unused));
static jboolean Java_BigInteger_primeToCertainty(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper p0,
    const base::android::JavaRef<jobject>& p1) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "primeToCertainty",
      "(ILjava/util/Random;)Z",
      &g_java_math_BigInteger_primeToCertainty);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, as_jint(p0), p1.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_valueOf = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_valueOf(JNIEnv* env, jlong p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_valueOf(JNIEnv* env, jlong p0) {
  CHECK_CLAZZ(env, java_math_BigInteger_clazz(env),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_math_BigInteger_clazz(env),
      "valueOf",
      "(J)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_valueOf);

  jobject ret =
      env->CallStaticObjectMethod(java_math_BigInteger_clazz(env),
          method_id, p0);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_addJMBI_JMBI = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_addJMBI_JMBI(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_addJMBI_JMBI(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "add",
      "(Ljava/math/BigInteger;)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_addJMBI_JMBI);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_addJMBI_J = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_addJMBI_J(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_addJMBI_J(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "add",
      "(J)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_addJMBI_J);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_subtract = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_subtract(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_subtract(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "subtract",
      "(Ljava/math/BigInteger;)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_subtract);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_multiplyJMBI_JMBI = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_multiplyJMBI_JMBI(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_multiplyJMBI_JMBI(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "multiply",
      "(Ljava/math/BigInteger;)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_multiplyJMBI_JMBI);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_multiplyJMBI_J = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_multiplyJMBI_J(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_multiplyJMBI_J(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "multiply",
      "(J)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_multiplyJMBI_J);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_divide = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_divide(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_divide(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "divide",
      "(Ljava/math/BigInteger;)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_divide);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_divideAndRemainder = 0;
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_BigInteger_divideAndRemainder(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_BigInteger_divideAndRemainder(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "divideAndRemainder",
      "(Ljava/math/BigInteger;)[Ljava/math/BigInteger;",
      &g_java_math_BigInteger_divideAndRemainder);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallObjectMethod(obj.obj(),
          method_id, p0.obj()));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_remainder = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_remainder(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_remainder(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "remainder",
      "(Ljava/math/BigInteger;)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_remainder);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_pow = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_pow(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, JniIntWrapper p0)
    __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_pow(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, JniIntWrapper p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "pow",
      "(I)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_pow);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_gcd = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_gcd(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_gcd(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "gcd",
      "(Ljava/math/BigInteger;)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_gcd);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_bitLengthForInt = 0;
static jint Java_BigInteger_bitLengthForInt(JNIEnv* env, JniIntWrapper p0)
    __attribute__ ((unused));
static jint Java_BigInteger_bitLengthForInt(JNIEnv* env, JniIntWrapper p0) {
  CHECK_CLAZZ(env, java_math_BigInteger_clazz(env),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_math_BigInteger_clazz(env),
      "bitLengthForInt",
      "(I)I",
      &g_java_math_BigInteger_bitLengthForInt);

  jint ret =
      env->CallStaticIntMethod(java_math_BigInteger_clazz(env),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_primitiveRightShift = 0;
static void Java_BigInteger_primitiveRightShift(JNIEnv* env, const
    base::android::JavaRef<jintArray>& p0,
    JniIntWrapper p1,
    JniIntWrapper p2) __attribute__ ((unused));
static void Java_BigInteger_primitiveRightShift(JNIEnv* env, const
    base::android::JavaRef<jintArray>& p0,
    JniIntWrapper p1,
    JniIntWrapper p2) {
  CHECK_CLAZZ(env, java_math_BigInteger_clazz(env),
      java_math_BigInteger_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_math_BigInteger_clazz(env),
      "primitiveRightShift",
      "([III)V",
      &g_java_math_BigInteger_primitiveRightShift);

     env->CallStaticVoidMethod(java_math_BigInteger_clazz(env),
          method_id, p0.obj(), as_jint(p1), as_jint(p2));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_java_math_BigInteger_primitiveLeftShift = 0;
static void Java_BigInteger_primitiveLeftShift(JNIEnv* env, const
    base::android::JavaRef<jintArray>& p0,
    JniIntWrapper p1,
    JniIntWrapper p2) __attribute__ ((unused));
static void Java_BigInteger_primitiveLeftShift(JNIEnv* env, const
    base::android::JavaRef<jintArray>& p0,
    JniIntWrapper p1,
    JniIntWrapper p2) {
  CHECK_CLAZZ(env, java_math_BigInteger_clazz(env),
      java_math_BigInteger_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_math_BigInteger_clazz(env),
      "primitiveLeftShift",
      "([III)V",
      &g_java_math_BigInteger_primitiveLeftShift);

     env->CallStaticVoidMethod(java_math_BigInteger_clazz(env),
          method_id, p0.obj(), as_jint(p1), as_jint(p2));
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_java_math_BigInteger_abs = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_abs(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_abs(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "abs",
      "()Ljava/math/BigInteger;",
      &g_java_math_BigInteger_abs);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_negate = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_negate(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_negate(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "negate",
      "()Ljava/math/BigInteger;",
      &g_java_math_BigInteger_negate);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_signum = 0;
static jint Java_BigInteger_signum(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jint Java_BigInteger_signum(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "signum",
      "()I",
      &g_java_math_BigInteger_signum);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_mod = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_mod(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_mod(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "mod",
      "(Ljava/math/BigInteger;)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_mod);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_modPow = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_modPow(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0,
    const base::android::JavaRef<jobject>& p1) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_modPow(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0,
    const base::android::JavaRef<jobject>& p1) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "modPow",
      "(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_modPow);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0.obj(), p1.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_mulAdd = 0;
static jint Java_BigInteger_mulAdd(JNIEnv* env, const
    base::android::JavaRef<jintArray>& p0,
    const base::android::JavaRef<jintArray>& p1,
    JniIntWrapper p2,
    JniIntWrapper p3,
    JniIntWrapper p4) __attribute__ ((unused));
static jint Java_BigInteger_mulAdd(JNIEnv* env, const
    base::android::JavaRef<jintArray>& p0,
    const base::android::JavaRef<jintArray>& p1,
    JniIntWrapper p2,
    JniIntWrapper p3,
    JniIntWrapper p4) {
  CHECK_CLAZZ(env, java_math_BigInteger_clazz(env),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_math_BigInteger_clazz(env),
      "mulAdd",
      "([I[IIII)I",
      &g_java_math_BigInteger_mulAdd);

  jint ret =
      env->CallStaticIntMethod(java_math_BigInteger_clazz(env),
          method_id, p0.obj(), p1.obj(), as_jint(p2), as_jint(p3), as_jint(p4));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_addOne = 0;
static jint Java_BigInteger_addOne(JNIEnv* env, const
    base::android::JavaRef<jintArray>& p0,
    JniIntWrapper p1,
    JniIntWrapper p2,
    JniIntWrapper p3) __attribute__ ((unused));
static jint Java_BigInteger_addOne(JNIEnv* env, const
    base::android::JavaRef<jintArray>& p0,
    JniIntWrapper p1,
    JniIntWrapper p2,
    JniIntWrapper p3) {
  CHECK_CLAZZ(env, java_math_BigInteger_clazz(env),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_math_BigInteger_clazz(env),
      "addOne",
      "([IIII)I",
      &g_java_math_BigInteger_addOne);

  jint ret =
      env->CallStaticIntMethod(java_math_BigInteger_clazz(env),
          method_id, p0.obj(), as_jint(p1), as_jint(p2), as_jint(p3));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_modInverse = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_modInverse(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_modInverse(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "modInverse",
      "(Ljava/math/BigInteger;)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_modInverse);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_shiftLeft = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_shiftLeft(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper p0) __attribute__
    ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_shiftLeft(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "shiftLeft",
      "(I)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_shiftLeft);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_shiftRight = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_shiftRight(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper p0) __attribute__
    ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_shiftRight(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "shiftRight",
      "(I)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_shiftRight);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_javaIncrement = 0;
static base::android::ScopedJavaLocalRef<jintArray>
    Java_BigInteger_javaIncrement(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jintArray>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jintArray>
    Java_BigInteger_javaIncrement(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jintArray>& p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "javaIncrement",
      "([I)[I",
      &g_java_math_BigInteger_javaIncrement);

  jintArray ret =
      static_cast<jintArray>(env->CallObjectMethod(obj.obj(),
          method_id, p0.obj()));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jintArray>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_and = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_and(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_and(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "and",
      "(Ljava/math/BigInteger;)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_and);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_or = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_or(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_or(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "or",
      "(Ljava/math/BigInteger;)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_or);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_xor = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_xor(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_xor(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "xor",
      "(Ljava/math/BigInteger;)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_xor);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_not = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_not(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_not(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "not",
      "()Ljava/math/BigInteger;",
      &g_java_math_BigInteger_not);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_andNot = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_andNot(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_andNot(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "andNot",
      "(Ljava/math/BigInteger;)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_andNot);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_testBit = 0;
static jboolean Java_BigInteger_testBit(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper p0) __attribute__
    ((unused));
static jboolean Java_BigInteger_testBit(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "testBit",
      "(I)Z",
      &g_java_math_BigInteger_testBit);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_setBit = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_setBit(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, JniIntWrapper p0)
    __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_setBit(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, JniIntWrapper p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "setBit",
      "(I)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_setBit);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_clearBit = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_clearBit(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, JniIntWrapper p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_clearBit(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, JniIntWrapper p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "clearBit",
      "(I)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_clearBit);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_flipBit = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_flipBit(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, JniIntWrapper p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_flipBit(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, JniIntWrapper p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "flipBit",
      "(I)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_flipBit);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_getLowestSetBit = 0;
static jint Java_BigInteger_getLowestSetBit(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jint Java_BigInteger_getLowestSetBit(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "getLowestSetBit",
      "()I",
      &g_java_math_BigInteger_getLowestSetBit);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_bitLength = 0;
static jint Java_BigInteger_bitLength(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jint Java_BigInteger_bitLength(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "bitLength",
      "()I",
      &g_java_math_BigInteger_bitLength);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_bitCount = 0;
static jint Java_BigInteger_bitCount(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jint Java_BigInteger_bitCount(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "bitCount",
      "()I",
      &g_java_math_BigInteger_bitCount);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_isProbablePrime = 0;
static jboolean Java_BigInteger_isProbablePrime(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper p0) __attribute__
    ((unused));
static jboolean Java_BigInteger_isProbablePrime(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "isProbablePrime",
      "(I)Z",
      &g_java_math_BigInteger_isProbablePrime);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_compareToI_JMBI = 0;
static jint Java_BigInteger_compareToI_JMBI(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static jint Java_BigInteger_compareToI_JMBI(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "compareTo",
      "(Ljava/math/BigInteger;)I",
      &g_java_math_BigInteger_compareToI_JMBI);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_compareMagnitudeI_JMBI =
    0;
static jint Java_BigInteger_compareMagnitudeI_JMBI(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static jint Java_BigInteger_compareMagnitudeI_JMBI(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "compareMagnitude",
      "(Ljava/math/BigInteger;)I",
      &g_java_math_BigInteger_compareMagnitudeI_JMBI);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_compareMagnitudeI_J = 0;
static jint Java_BigInteger_compareMagnitudeI_J(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong p0) __attribute__ ((unused));
static jint Java_BigInteger_compareMagnitudeI_J(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "compareMagnitude",
      "(J)I",
      &g_java_math_BigInteger_compareMagnitudeI_J);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id, p0);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_equals = 0;
static jboolean Java_BigInteger_equals(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static jboolean Java_BigInteger_equals(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "equals",
      "(Ljava/lang/Object;)Z",
      &g_java_math_BigInteger_equals);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_min = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_min(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_min(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "min",
      "(Ljava/math/BigInteger;)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_min);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_max = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_max(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_BigInteger_max(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "max",
      "(Ljava/math/BigInteger;)Ljava/math/BigInteger;",
      &g_java_math_BigInteger_max);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_hashCode = 0;
static jint Java_BigInteger_hashCode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jint Java_BigInteger_hashCode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "hashCode",
      "()I",
      &g_java_math_BigInteger_hashCode);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_toStringJLS_I = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_BigInteger_toStringJLS_I(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper p0) __attribute__
    ((unused));
static base::android::ScopedJavaLocalRef<jstring>
    Java_BigInteger_toStringJLS_I(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "toString",
      "(I)Ljava/lang/String;",
      &g_java_math_BigInteger_toStringJLS_I);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id, as_jint(p0)));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_toStringJLS = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_BigInteger_toStringJLS(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring>
    Java_BigInteger_toStringJLS(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "toString",
      "()Ljava/lang/String;",
      &g_java_math_BigInteger_toStringJLS);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_toByteArray = 0;
static base::android::ScopedJavaLocalRef<jbyteArray>
    Java_BigInteger_toByteArray(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jbyteArray>
    Java_BigInteger_toByteArray(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "toByteArray",
      "()[B",
      &g_java_math_BigInteger_toByteArray);

  jbyteArray ret =
      static_cast<jbyteArray>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jbyteArray>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_intValue = 0;
static jint Java_BigInteger_intValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jint Java_BigInteger_intValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "intValue",
      "()I",
      &g_java_math_BigInteger_intValue);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_longValue = 0;
static jlong Java_BigInteger_longValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jlong Java_BigInteger_longValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "longValue",
      "()J",
      &g_java_math_BigInteger_longValue);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_floatValue = 0;
static jfloat Java_BigInteger_floatValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jfloat Java_BigInteger_floatValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "floatValue",
      "()F",
      &g_java_math_BigInteger_floatValue);

  jfloat ret =
      env->CallFloatMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_doubleValue = 0;
static jdouble Java_BigInteger_doubleValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jdouble Java_BigInteger_doubleValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "doubleValue",
      "()D",
      &g_java_math_BigInteger_doubleValue);

  jdouble ret =
      env->CallDoubleMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_longValueExact = 0;
static jlong Java_BigInteger_longValueExact(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jlong Java_BigInteger_longValueExact(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "longValueExact",
      "()J",
      &g_java_math_BigInteger_longValueExact);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_intValueExact = 0;
static jint Java_BigInteger_intValueExact(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jint Java_BigInteger_intValueExact(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "intValueExact",
      "()I",
      &g_java_math_BigInteger_intValueExact);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_shortValueExact = 0;
static jshort Java_BigInteger_shortValueExact(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jshort Java_BigInteger_shortValueExact(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "shortValueExact",
      "()S",
      &g_java_math_BigInteger_shortValueExact);

  jshort ret =
      env->CallShortMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_byteValueExact = 0;
static jbyte Java_BigInteger_byteValueExact(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jbyte Java_BigInteger_byteValueExact(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "byteValueExact",
      "()B",
      &g_java_math_BigInteger_byteValueExact);

  jbyte ret =
      env->CallByteMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_compareToI_JLO = 0;
static jint Java_BigInteger_compareToI_JLO(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static jint Java_BigInteger_compareToI_JLO(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_math_BigInteger_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "compareTo",
      "(Ljava/lang/Object;)I",
      &g_java_math_BigInteger_compareToI_JLO);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_math_BigInteger_ConstructorJMBI_AB = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_ConstructorJMBI_AB(JNIEnv* env, const
    base::android::JavaRef<jbyteArray>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_ConstructorJMBI_AB(JNIEnv* env, const
    base::android::JavaRef<jbyteArray>& p0) {
  CHECK_CLAZZ(env, java_math_BigInteger_clazz(env),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "<init>",
      "([B)V",
      &g_java_math_BigInteger_ConstructorJMBI_AB);

  jobject ret =
      env->NewObject(java_math_BigInteger_clazz(env),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_ConstructorJMBI_I_AB = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_ConstructorJMBI_I_AB(JNIEnv* env, JniIntWrapper p0,
    const base::android::JavaRef<jbyteArray>& p1) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_ConstructorJMBI_I_AB(JNIEnv* env, JniIntWrapper p0,
    const base::android::JavaRef<jbyteArray>& p1) {
  CHECK_CLAZZ(env, java_math_BigInteger_clazz(env),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "<init>",
      "(I[B)V",
      &g_java_math_BigInteger_ConstructorJMBI_I_AB);

  jobject ret =
      env->NewObject(java_math_BigInteger_clazz(env),
          method_id, as_jint(p0), p1.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_ConstructorJMBI_JLS_I =
    0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_ConstructorJMBI_JLS_I(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0,
    JniIntWrapper p1) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_ConstructorJMBI_JLS_I(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0,
    JniIntWrapper p1) {
  CHECK_CLAZZ(env, java_math_BigInteger_clazz(env),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "<init>",
      "(Ljava/lang/String;I)V",
      &g_java_math_BigInteger_ConstructorJMBI_JLS_I);

  jobject ret =
      env->NewObject(java_math_BigInteger_clazz(env),
          method_id, p0.obj(), as_jint(p1));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_ConstructorJMBI_JLS = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_ConstructorJMBI_JLS(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_ConstructorJMBI_JLS(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0) {
  CHECK_CLAZZ(env, java_math_BigInteger_clazz(env),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "<init>",
      "(Ljava/lang/String;)V",
      &g_java_math_BigInteger_ConstructorJMBI_JLS);

  jobject ret =
      env->NewObject(java_math_BigInteger_clazz(env),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_ConstructorJMBI_I_JUR =
    0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_ConstructorJMBI_I_JUR(JNIEnv* env, JniIntWrapper p0,
    const base::android::JavaRef<jobject>& p1) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_ConstructorJMBI_I_JUR(JNIEnv* env, JniIntWrapper p0,
    const base::android::JavaRef<jobject>& p1) {
  CHECK_CLAZZ(env, java_math_BigInteger_clazz(env),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "<init>",
      "(ILjava/util/Random;)V",
      &g_java_math_BigInteger_ConstructorJMBI_I_JUR);

  jobject ret =
      env->NewObject(java_math_BigInteger_clazz(env),
          method_id, as_jint(p0), p1.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_math_BigInteger_ConstructorJMBI_I_I_JUR =
    0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_ConstructorJMBI_I_I_JUR(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1,
    const base::android::JavaRef<jobject>& p2) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_BigInteger_ConstructorJMBI_I_I_JUR(JNIEnv* env, JniIntWrapper p0,
    JniIntWrapper p1,
    const base::android::JavaRef<jobject>& p2) {
  CHECK_CLAZZ(env, java_math_BigInteger_clazz(env),
      java_math_BigInteger_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_math_BigInteger_clazz(env),
      "<init>",
      "(IILjava/util/Random;)V",
      &g_java_math_BigInteger_ConstructorJMBI_I_I_JUR);

  jobject ret =
      env->NewObject(java_math_BigInteger_clazz(env),
          method_id, as_jint(p0), as_jint(p1), p2.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace JNI_BigInteger

#endif  // java_math_BigInteger_JNI
