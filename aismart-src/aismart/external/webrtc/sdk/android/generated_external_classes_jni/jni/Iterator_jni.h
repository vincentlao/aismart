// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     java/util/Iterator

#ifndef java_util_Iterator_JNI
#define java_util_Iterator_JNI

#include "sdk/android/src/jni/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char kClassPath_java_util_Iterator[];
const char kClassPath_java_util_Iterator[] = "java/util/Iterator";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_java_util_Iterator_clazz = 0;
#ifndef java_util_Iterator_clazz_defined
#define java_util_Iterator_clazz_defined
inline jclass java_util_Iterator_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_java_util_Iterator,
      &g_java_util_Iterator_clazz);
}
#endif

namespace JNI_Iterator {

// Step 2: method stubs.

static base::subtle::AtomicWord g_java_util_Iterator_hasNext = 0;
static jboolean Java_Iterator_hasNext(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jboolean Java_Iterator_hasNext(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_Iterator_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_Iterator_clazz(env),
      "hasNext",
      "()Z",
      &g_java_util_Iterator_hasNext);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_util_Iterator_next = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_Iterator_next(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_Iterator_next(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_Iterator_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_Iterator_clazz(env),
      "next",
      "()Ljava/lang/Object;",
      &g_java_util_Iterator_next);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_util_Iterator_remove = 0;
static void Java_Iterator_remove(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static void Java_Iterator_remove(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_Iterator_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_Iterator_clazz(env),
      "remove",
      "()V",
      &g_java_util_Iterator_remove);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_java_util_Iterator_forEachRemaining = 0;
static void Java_Iterator_forEachRemaining(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static void Java_Iterator_forEachRemaining(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_Iterator_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_Iterator_clazz(env),
      "forEachRemaining",
      "(Ljava/util/function/Consumer;)V",
      &g_java_util_Iterator_forEachRemaining);

     env->CallVoidMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
}

}  // namespace JNI_Iterator

#endif  // java_util_Iterator_JNI
