// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     java/util/LinkedHashMap

#ifndef java_util_LinkedHashMap_JNI
#define java_util_LinkedHashMap_JNI

#include "sdk/android/src/jni/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char kClassPath_java_util_LinkedHashMap[];
const char kClassPath_java_util_LinkedHashMap[] = "java/util/LinkedHashMap";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_java_util_LinkedHashMap_clazz
    = 0;
#ifndef java_util_LinkedHashMap_clazz_defined
#define java_util_LinkedHashMap_clazz_defined
inline jclass java_util_LinkedHashMap_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_java_util_LinkedHashMap,
      &g_java_util_LinkedHashMap_clazz);
}
#endif

namespace JNI_LinkedHashMap {

// Step 2: method stubs.

static base::subtle::AtomicWord g_java_util_LinkedHashMap_reinitialize = 0;
static void Java_LinkedHashMap_reinitialize(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static void Java_LinkedHashMap_reinitialize(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_LinkedHashMap_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "reinitialize",
      "()V",
      &g_java_util_LinkedHashMap_reinitialize);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_newNode = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_newNode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper p0,
    const base::android::JavaRef<jobject>& p1,
    const base::android::JavaRef<jobject>& p2,
    const base::android::JavaRef<jobject>& p3) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_newNode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper p0,
    const base::android::JavaRef<jobject>& p1,
    const base::android::JavaRef<jobject>& p2,
    const base::android::JavaRef<jobject>& p3) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_LinkedHashMap_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "newNode",
"(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)Ljava/util/HashMap$Node;",
      &g_java_util_LinkedHashMap_newNode);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, as_jint(p0), p1.obj(), p2.obj(), p3.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_replacementNode = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_replacementNode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0,
    const base::android::JavaRef<jobject>& p1) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_replacementNode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0,
    const base::android::JavaRef<jobject>& p1) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_LinkedHashMap_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "replacementNode",
"(Ljava/util/HashMap$Node;Ljava/util/HashMap$Node;)Ljava/util/HashMap$Node;",
      &g_java_util_LinkedHashMap_replacementNode);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0.obj(), p1.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_newTreeNode = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_newTreeNode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper p0,
    const base::android::JavaRef<jobject>& p1,
    const base::android::JavaRef<jobject>& p2,
    const base::android::JavaRef<jobject>& p3) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_newTreeNode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper p0,
    const base::android::JavaRef<jobject>& p1,
    const base::android::JavaRef<jobject>& p2,
    const base::android::JavaRef<jobject>& p3) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_LinkedHashMap_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "newTreeNode",
"(ILjava/lang/Object;Ljava/lang/Object;Ljava/util/HashMap$Node;)Ljava/util/HashMap$TreeNode;",
      &g_java_util_LinkedHashMap_newTreeNode);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, as_jint(p0), p1.obj(), p2.obj(), p3.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_replacementTreeNode =
    0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_replacementTreeNode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0,
    const base::android::JavaRef<jobject>& p1) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_replacementTreeNode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0,
    const base::android::JavaRef<jobject>& p1) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_LinkedHashMap_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "replacementTreeNode",
"(Ljava/util/HashMap$Node;Ljava/util/HashMap$Node;)Ljava/util/HashMap$TreeNode;",
      &g_java_util_LinkedHashMap_replacementTreeNode);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0.obj(), p1.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_afterNodeRemoval = 0;
static void Java_LinkedHashMap_afterNodeRemoval(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static void Java_LinkedHashMap_afterNodeRemoval(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_LinkedHashMap_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "afterNodeRemoval",
      "(Ljava/util/HashMap$Node;)V",
      &g_java_util_LinkedHashMap_afterNodeRemoval);

     env->CallVoidMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_afterNodeInsertion =
    0;
static void Java_LinkedHashMap_afterNodeInsertion(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean p0) __attribute__ ((unused));
static void Java_LinkedHashMap_afterNodeInsertion(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_LinkedHashMap_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "afterNodeInsertion",
      "(Z)V",
      &g_java_util_LinkedHashMap_afterNodeInsertion);

     env->CallVoidMethod(obj.obj(),
          method_id, p0);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_afterNodeAccess = 0;
static void Java_LinkedHashMap_afterNodeAccess(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static void Java_LinkedHashMap_afterNodeAccess(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_LinkedHashMap_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "afterNodeAccess",
      "(Ljava/util/HashMap$Node;)V",
      &g_java_util_LinkedHashMap_afterNodeAccess);

     env->CallVoidMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_internalWriteEntries =
    0;
static void Java_LinkedHashMap_internalWriteEntries(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static void Java_LinkedHashMap_internalWriteEntries(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_LinkedHashMap_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "internalWriteEntries",
      "(Ljava/io/ObjectOutputStream;)V",
      &g_java_util_LinkedHashMap_internalWriteEntries);

     env->CallVoidMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_containsValue = 0;
static jboolean Java_LinkedHashMap_containsValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static jboolean Java_LinkedHashMap_containsValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_LinkedHashMap_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "containsValue",
      "(Ljava/lang/Object;)Z",
      &g_java_util_LinkedHashMap_containsValue);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_get = 0;
static base::android::ScopedJavaLocalRef<jobject> Java_LinkedHashMap_get(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject> Java_LinkedHashMap_get(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jobject>& p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_LinkedHashMap_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "get",
      "(Ljava/lang/Object;)Ljava/lang/Object;",
      &g_java_util_LinkedHashMap_get);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_getOrDefault = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_getOrDefault(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0,
    const base::android::JavaRef<jobject>& p1) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_getOrDefault(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0,
    const base::android::JavaRef<jobject>& p1) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_LinkedHashMap_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "getOrDefault",
      "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;",
      &g_java_util_LinkedHashMap_getOrDefault);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id, p0.obj(), p1.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_clear = 0;
static void Java_LinkedHashMap_clear(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static void Java_LinkedHashMap_clear(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_LinkedHashMap_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "clear",
      "()V",
      &g_java_util_LinkedHashMap_clear);

     env->CallVoidMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_removeEldestEntry = 0;
static jboolean Java_LinkedHashMap_removeEldestEntry(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static jboolean Java_LinkedHashMap_removeEldestEntry(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_LinkedHashMap_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "removeEldestEntry",
      "(Ljava/util/Map$Entry;)Z",
      &g_java_util_LinkedHashMap_removeEldestEntry);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_keySet = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_keySet(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_keySet(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_LinkedHashMap_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "keySet",
      "()Ljava/util/Set;",
      &g_java_util_LinkedHashMap_keySet);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_values = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_values(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_values(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_LinkedHashMap_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "values",
      "()Ljava/util/Collection;",
      &g_java_util_LinkedHashMap_values);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_entrySet = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_entrySet(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_entrySet(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_LinkedHashMap_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "entrySet",
      "()Ljava/util/Set;",
      &g_java_util_LinkedHashMap_entrySet);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_forEach = 0;
static void Java_LinkedHashMap_forEach(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static void Java_LinkedHashMap_forEach(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_LinkedHashMap_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "forEach",
      "(Ljava/util/function/BiConsumer;)V",
      &g_java_util_LinkedHashMap_forEach);

     env->CallVoidMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_replaceAll = 0;
static void Java_LinkedHashMap_replaceAll(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static void Java_LinkedHashMap_replaceAll(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_util_LinkedHashMap_clazz(env));
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "replaceAll",
      "(Ljava/util/function/BiFunction;)V",
      &g_java_util_LinkedHashMap_replaceAll);

     env->CallVoidMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_ConstructorJULIHM_I_F
    = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_ConstructorJULIHM_I_F(JNIEnv* env, JniIntWrapper p0,
    jfloat p1) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_ConstructorJULIHM_I_F(JNIEnv* env, JniIntWrapper p0,
    jfloat p1) {
  CHECK_CLAZZ(env, java_util_LinkedHashMap_clazz(env),
      java_util_LinkedHashMap_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "<init>",
      "(IF)V",
      &g_java_util_LinkedHashMap_ConstructorJULIHM_I_F);

  jobject ret =
      env->NewObject(java_util_LinkedHashMap_clazz(env),
          method_id, as_jint(p0), p1);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_ConstructorJULIHM_I =
    0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_ConstructorJULIHM_I(JNIEnv* env, JniIntWrapper p0)
    __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_ConstructorJULIHM_I(JNIEnv* env, JniIntWrapper p0) {
  CHECK_CLAZZ(env, java_util_LinkedHashMap_clazz(env),
      java_util_LinkedHashMap_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "<init>",
      "(I)V",
      &g_java_util_LinkedHashMap_ConstructorJULIHM_I);

  jobject ret =
      env->NewObject(java_util_LinkedHashMap_clazz(env),
          method_id, as_jint(p0));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_ConstructorJULIHM = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_ConstructorJULIHM(JNIEnv* env) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_ConstructorJULIHM(JNIEnv* env) {
  CHECK_CLAZZ(env, java_util_LinkedHashMap_clazz(env),
      java_util_LinkedHashMap_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "<init>",
      "()V",
      &g_java_util_LinkedHashMap_ConstructorJULIHM);

  jobject ret =
      env->NewObject(java_util_LinkedHashMap_clazz(env),
          method_id);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_util_LinkedHashMap_ConstructorJULIHM_JUM
    = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_ConstructorJULIHM_JUM(JNIEnv* env, const
    base::android::JavaRef<jobject>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_ConstructorJULIHM_JUM(JNIEnv* env, const
    base::android::JavaRef<jobject>& p0) {
  CHECK_CLAZZ(env, java_util_LinkedHashMap_clazz(env),
      java_util_LinkedHashMap_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "<init>",
      "(Ljava/util/Map;)V",
      &g_java_util_LinkedHashMap_ConstructorJULIHM_JUM);

  jobject ret =
      env->NewObject(java_util_LinkedHashMap_clazz(env),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord
    g_java_util_LinkedHashMap_ConstructorJULIHM_I_F_Z = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_ConstructorJULIHM_I_F_Z(JNIEnv* env, JniIntWrapper p0,
    jfloat p1,
    jboolean p2) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_LinkedHashMap_ConstructorJULIHM_I_F_Z(JNIEnv* env, JniIntWrapper p0,
    jfloat p1,
    jboolean p2) {
  CHECK_CLAZZ(env, java_util_LinkedHashMap_clazz(env),
      java_util_LinkedHashMap_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_util_LinkedHashMap_clazz(env),
      "<init>",
      "(IFZ)V",
      &g_java_util_LinkedHashMap_ConstructorJULIHM_I_F_Z);

  jobject ret =
      env->NewObject(java_util_LinkedHashMap_clazz(env),
          method_id, as_jint(p0), p1, p2);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace JNI_LinkedHashMap

#endif  // java_util_LinkedHashMap_JNI
