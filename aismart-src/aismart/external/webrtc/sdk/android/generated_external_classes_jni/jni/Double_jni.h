// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     java/lang/Double

#ifndef java_lang_Double_JNI
#define java_lang_Double_JNI

#include "sdk/android/src/jni/jni_generator_helper.h"

// Step 1: forward declarations.
JNI_REGISTRATION_EXPORT extern const char kClassPath_java_lang_Double[];
const char kClassPath_java_lang_Double[] = "java/lang/Double";

// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT base::subtle::AtomicWord g_java_lang_Double_clazz = 0;
#ifndef java_lang_Double_clazz_defined
#define java_lang_Double_clazz_defined
inline jclass java_lang_Double_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_java_lang_Double,
      &g_java_lang_Double_clazz);
}
#endif

namespace JNI_Double {

enum Java_Double_constant_fields {
  MAX_EXPONENT = 1023,
  MIN_EXPONENT = -1022,
  SIZE = 64,
  BYTES = 8,
};

// Step 2: method stubs.

static base::subtle::AtomicWord g_java_lang_Double_toStringJLS_D = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_Double_toStringJLS_D(JNIEnv* env, jdouble p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring>
    Java_Double_toStringJLS_D(JNIEnv* env, jdouble p0) {
  CHECK_CLAZZ(env, java_lang_Double_clazz(env),
      java_lang_Double_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_lang_Double_clazz(env),
      "toString",
      "(D)Ljava/lang/String;",
      &g_java_lang_Double_toStringJLS_D);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(java_lang_Double_clazz(env),
          method_id, p0));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_java_lang_Double_toHexString = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_Double_toHexString(JNIEnv* env, jdouble p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring>
    Java_Double_toHexString(JNIEnv* env, jdouble p0) {
  CHECK_CLAZZ(env, java_lang_Double_clazz(env),
      java_lang_Double_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_lang_Double_clazz(env),
      "toHexString",
      "(D)Ljava/lang/String;",
      &g_java_lang_Double_toHexString);

  jstring ret =
static_cast<jstring>(env->CallStaticObjectMethod(java_lang_Double_clazz(env),
          method_id, p0));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_java_lang_Double_valueOfJLD_JLS = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_Double_valueOfJLD_JLS(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_Double_valueOfJLD_JLS(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0) {
  CHECK_CLAZZ(env, java_lang_Double_clazz(env),
      java_lang_Double_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_lang_Double_clazz(env),
      "valueOf",
      "(Ljava/lang/String;)Ljava/lang/Double;",
      &g_java_lang_Double_valueOfJLD_JLS);

  jobject ret =
      env->CallStaticObjectMethod(java_lang_Double_clazz(env),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_lang_Double_valueOfJLD_D = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_Double_valueOfJLD_D(JNIEnv* env, jdouble p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_Double_valueOfJLD_D(JNIEnv* env, jdouble p0) {
  CHECK_CLAZZ(env, java_lang_Double_clazz(env),
      java_lang_Double_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_lang_Double_clazz(env),
      "valueOf",
      "(D)Ljava/lang/Double;",
      &g_java_lang_Double_valueOfJLD_D);

  jobject ret =
      env->CallStaticObjectMethod(java_lang_Double_clazz(env),
          method_id, p0);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_lang_Double_parseDouble = 0;
static jdouble Java_Double_parseDouble(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0) __attribute__ ((unused));
static jdouble Java_Double_parseDouble(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0) {
  CHECK_CLAZZ(env, java_lang_Double_clazz(env),
      java_lang_Double_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_lang_Double_clazz(env),
      "parseDouble",
      "(Ljava/lang/String;)D",
      &g_java_lang_Double_parseDouble);

  jdouble ret =
      env->CallStaticDoubleMethod(java_lang_Double_clazz(env),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_isNaNZ_D = 0;
static jboolean Java_Double_isNaNZ_D(JNIEnv* env, jdouble p0) __attribute__
    ((unused));
static jboolean Java_Double_isNaNZ_D(JNIEnv* env, jdouble p0) {
  CHECK_CLAZZ(env, java_lang_Double_clazz(env),
      java_lang_Double_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_lang_Double_clazz(env),
      "isNaN",
      "(D)Z",
      &g_java_lang_Double_isNaNZ_D);

  jboolean ret =
      env->CallStaticBooleanMethod(java_lang_Double_clazz(env),
          method_id, p0);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_isInfiniteZ_D = 0;
static jboolean Java_Double_isInfiniteZ_D(JNIEnv* env, jdouble p0) __attribute__
    ((unused));
static jboolean Java_Double_isInfiniteZ_D(JNIEnv* env, jdouble p0) {
  CHECK_CLAZZ(env, java_lang_Double_clazz(env),
      java_lang_Double_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_lang_Double_clazz(env),
      "isInfinite",
      "(D)Z",
      &g_java_lang_Double_isInfiniteZ_D);

  jboolean ret =
      env->CallStaticBooleanMethod(java_lang_Double_clazz(env),
          method_id, p0);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_isFinite = 0;
static jboolean Java_Double_isFinite(JNIEnv* env, jdouble p0) __attribute__
    ((unused));
static jboolean Java_Double_isFinite(JNIEnv* env, jdouble p0) {
  CHECK_CLAZZ(env, java_lang_Double_clazz(env),
      java_lang_Double_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_lang_Double_clazz(env),
      "isFinite",
      "(D)Z",
      &g_java_lang_Double_isFinite);

  jboolean ret =
      env->CallStaticBooleanMethod(java_lang_Double_clazz(env),
          method_id, p0);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_isNaNZ = 0;
static jboolean Java_Double_isNaNZ(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jboolean Java_Double_isNaNZ(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Double_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_lang_Double_clazz(env),
      "isNaN",
      "()Z",
      &g_java_lang_Double_isNaNZ);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_isInfiniteZ = 0;
static jboolean Java_Double_isInfiniteZ(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jboolean Java_Double_isInfiniteZ(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Double_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_lang_Double_clazz(env),
      "isInfinite",
      "()Z",
      &g_java_lang_Double_isInfiniteZ);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_toStringJLS = 0;
static base::android::ScopedJavaLocalRef<jstring>
    Java_Double_toStringJLS(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jstring>
    Java_Double_toStringJLS(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Double_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_lang_Double_clazz(env),
      "toString",
      "()Ljava/lang/String;",
      &g_java_lang_Double_toStringJLS);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          method_id));
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static base::subtle::AtomicWord g_java_lang_Double_byteValue = 0;
static jbyte Java_Double_byteValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jbyte Java_Double_byteValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Double_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_lang_Double_clazz(env),
      "byteValue",
      "()B",
      &g_java_lang_Double_byteValue);

  jbyte ret =
      env->CallByteMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_shortValue = 0;
static jshort Java_Double_shortValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jshort Java_Double_shortValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Double_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_lang_Double_clazz(env),
      "shortValue",
      "()S",
      &g_java_lang_Double_shortValue);

  jshort ret =
      env->CallShortMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_intValue = 0;
static jint Java_Double_intValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jint Java_Double_intValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Double_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_lang_Double_clazz(env),
      "intValue",
      "()I",
      &g_java_lang_Double_intValue);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_longValue = 0;
static jlong Java_Double_longValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jlong Java_Double_longValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Double_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_lang_Double_clazz(env),
      "longValue",
      "()J",
      &g_java_lang_Double_longValue);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_floatValue = 0;
static jfloat Java_Double_floatValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jfloat Java_Double_floatValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Double_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_lang_Double_clazz(env),
      "floatValue",
      "()F",
      &g_java_lang_Double_floatValue);

  jfloat ret =
      env->CallFloatMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_doubleValue = 0;
static jdouble Java_Double_doubleValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jdouble Java_Double_doubleValue(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Double_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_lang_Double_clazz(env),
      "doubleValue",
      "()D",
      &g_java_lang_Double_doubleValue);

  jdouble ret =
      env->CallDoubleMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_hashCodeI = 0;
static jint Java_Double_hashCodeI(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) __attribute__ ((unused));
static jint Java_Double_hashCodeI(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Double_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_lang_Double_clazz(env),
      "hashCode",
      "()I",
      &g_java_lang_Double_hashCodeI);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_hashCodeI_D = 0;
static jint Java_Double_hashCodeI_D(JNIEnv* env, jdouble p0) __attribute__
    ((unused));
static jint Java_Double_hashCodeI_D(JNIEnv* env, jdouble p0) {
  CHECK_CLAZZ(env, java_lang_Double_clazz(env),
      java_lang_Double_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_lang_Double_clazz(env),
      "hashCode",
      "(D)I",
      &g_java_lang_Double_hashCodeI_D);

  jint ret =
      env->CallStaticIntMethod(java_lang_Double_clazz(env),
          method_id, p0);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_equals = 0;
static jboolean Java_Double_equals(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static jboolean Java_Double_equals(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Double_clazz(env), false);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_lang_Double_clazz(env),
      "equals",
      "(Ljava/lang/Object;)Z",
      &g_java_lang_Double_equals);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_doubleToLongBits = 0;
static jlong Java_Double_doubleToLongBits(JNIEnv* env, jdouble p0) __attribute__
    ((unused));
static jlong Java_Double_doubleToLongBits(JNIEnv* env, jdouble p0) {
  CHECK_CLAZZ(env, java_lang_Double_clazz(env),
      java_lang_Double_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_lang_Double_clazz(env),
      "doubleToLongBits",
      "(D)J",
      &g_java_lang_Double_doubleToLongBits);

  jlong ret =
      env->CallStaticLongMethod(java_lang_Double_clazz(env),
          method_id, p0);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_doubleToRawLongBits = 0;
static jlong Java_Double_doubleToRawLongBits(JNIEnv* env, jdouble p0)
    __attribute__ ((unused));
static jlong Java_Double_doubleToRawLongBits(JNIEnv* env, jdouble p0) {
  CHECK_CLAZZ(env, java_lang_Double_clazz(env),
      java_lang_Double_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_lang_Double_clazz(env),
      "doubleToRawLongBits",
      "(D)J",
      &g_java_lang_Double_doubleToRawLongBits);

  jlong ret =
      env->CallStaticLongMethod(java_lang_Double_clazz(env),
          method_id, p0);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_longBitsToDouble = 0;
static jdouble Java_Double_longBitsToDouble(JNIEnv* env, jlong p0) __attribute__
    ((unused));
static jdouble Java_Double_longBitsToDouble(JNIEnv* env, jlong p0) {
  CHECK_CLAZZ(env, java_lang_Double_clazz(env),
      java_lang_Double_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_lang_Double_clazz(env),
      "longBitsToDouble",
      "(J)D",
      &g_java_lang_Double_longBitsToDouble);

  jdouble ret =
      env->CallStaticDoubleMethod(java_lang_Double_clazz(env),
          method_id, p0);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_compareToI_JLD = 0;
static jint Java_Double_compareToI_JLD(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static jint Java_Double_compareToI_JLD(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Double_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_lang_Double_clazz(env),
      "compareTo",
      "(Ljava/lang/Double;)I",
      &g_java_lang_Double_compareToI_JLD);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_compare = 0;
static jint Java_Double_compare(JNIEnv* env, jdouble p0,
    jdouble p1) __attribute__ ((unused));
static jint Java_Double_compare(JNIEnv* env, jdouble p0,
    jdouble p1) {
  CHECK_CLAZZ(env, java_lang_Double_clazz(env),
      java_lang_Double_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_lang_Double_clazz(env),
      "compare",
      "(DD)I",
      &g_java_lang_Double_compare);

  jint ret =
      env->CallStaticIntMethod(java_lang_Double_clazz(env),
          method_id, p0, p1);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_sum = 0;
static jdouble Java_Double_sum(JNIEnv* env, jdouble p0,
    jdouble p1) __attribute__ ((unused));
static jdouble Java_Double_sum(JNIEnv* env, jdouble p0,
    jdouble p1) {
  CHECK_CLAZZ(env, java_lang_Double_clazz(env),
      java_lang_Double_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_lang_Double_clazz(env),
      "sum",
      "(DD)D",
      &g_java_lang_Double_sum);

  jdouble ret =
      env->CallStaticDoubleMethod(java_lang_Double_clazz(env),
          method_id, p0, p1);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_max = 0;
static jdouble Java_Double_max(JNIEnv* env, jdouble p0,
    jdouble p1) __attribute__ ((unused));
static jdouble Java_Double_max(JNIEnv* env, jdouble p0,
    jdouble p1) {
  CHECK_CLAZZ(env, java_lang_Double_clazz(env),
      java_lang_Double_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_lang_Double_clazz(env),
      "max",
      "(DD)D",
      &g_java_lang_Double_max);

  jdouble ret =
      env->CallStaticDoubleMethod(java_lang_Double_clazz(env),
          method_id, p0, p1);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_min = 0;
static jdouble Java_Double_min(JNIEnv* env, jdouble p0,
    jdouble p1) __attribute__ ((unused));
static jdouble Java_Double_min(JNIEnv* env, jdouble p0,
    jdouble p1) {
  CHECK_CLAZZ(env, java_lang_Double_clazz(env),
      java_lang_Double_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_STATIC>(
      env, java_lang_Double_clazz(env),
      "min",
      "(DD)D",
      &g_java_lang_Double_min);

  jdouble ret =
      env->CallStaticDoubleMethod(java_lang_Double_clazz(env),
          method_id, p0, p1);
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_compareToI_JLO = 0;
static jint Java_Double_compareToI_JLO(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) __attribute__ ((unused));
static jint Java_Double_compareToI_JLO(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>&
    p0) {
  CHECK_CLAZZ(env, obj.obj(),
      java_lang_Double_clazz(env), 0);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_lang_Double_clazz(env),
      "compareTo",
      "(Ljava/lang/Object;)I",
      &g_java_lang_Double_compareToI_JLO);

  jint ret =
      env->CallIntMethod(obj.obj(),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return ret;
}

static base::subtle::AtomicWord g_java_lang_Double_ConstructorJLD_D = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_Double_ConstructorJLD_D(JNIEnv* env, jdouble p0) __attribute__
    ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_Double_ConstructorJLD_D(JNIEnv* env, jdouble p0) {
  CHECK_CLAZZ(env, java_lang_Double_clazz(env),
      java_lang_Double_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_lang_Double_clazz(env),
      "<init>",
      "(D)V",
      &g_java_lang_Double_ConstructorJLD_D);

  jobject ret =
      env->NewObject(java_lang_Double_clazz(env),
          method_id, p0);
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static base::subtle::AtomicWord g_java_lang_Double_ConstructorJLD_JLS = 0;
static base::android::ScopedJavaLocalRef<jobject>
    Java_Double_ConstructorJLD_JLS(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0) __attribute__ ((unused));
static base::android::ScopedJavaLocalRef<jobject>
    Java_Double_ConstructorJLD_JLS(JNIEnv* env, const
    base::android::JavaRef<jstring>& p0) {
  CHECK_CLAZZ(env, java_lang_Double_clazz(env),
      java_lang_Double_clazz(env), NULL);
  jmethodID method_id =
      base::android::MethodID::LazyGet<
      base::android::MethodID::TYPE_INSTANCE>(
      env, java_lang_Double_clazz(env),
      "<init>",
      "(Ljava/lang/String;)V",
      &g_java_lang_Double_ConstructorJLD_JLS);

  jobject ret =
      env->NewObject(java_lang_Double_clazz(env),
          method_id, p0.obj());
  jni_generator::CheckException(env);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace JNI_Double

#endif  // java_lang_Double_JNI
